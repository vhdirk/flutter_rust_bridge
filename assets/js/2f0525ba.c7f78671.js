"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[5602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={},s="Safety and CI",o={unversionedId:"guides/miscellaneous/safety",id:"guides/miscellaneous/safety",title:"Safety and CI",description:"CI",source:"@site/docs/guides/miscellaneous/safety.md",sourceDirName:"guides/miscellaneous",slug:"/guides/miscellaneous/safety",permalink:"/flutter_rust_bridge/guides/miscellaneous/safety",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/miscellaneous/safety.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dart Isolates",permalink:"/flutter_rust_bridge/guides/miscellaneous/isolates"},next:{title:"Compatibility and versioning",permalink:"/flutter_rust_bridge/guides/miscellaneous/compatibility"}},l={},u=[{value:"CI",id:"ci",level:2},{value:"Usage",id:"usage",level:2},{value:"Safety of unsafe",id:"safety-of-unsafe",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"safety-and-ci"},"Safety and CI"),(0,r.kt)("h2",{id:"ci"},"CI"),(0,r.kt)("p",null,"We heavily use CI to ensure everything is going well, including but not limited to memory safety.\nShortly speaking, we deploy not only ",(0,r.kt)("inlineCode",{parentName:"p"},"Valgrind")," but also sanitizers (",(0,r.kt)("inlineCode",{parentName:"p"},"ASAN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MSAN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LSAN"),") in the CI,\nwhich are commonly used tools to check safety issues."),(0,r.kt)("p",null,"As for all things that CI checks,\nplease refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/.github/workflows"},"the CI configuration"),"\nfor full details,\nand here is a brief list:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use Valgrind to check safety"),(0,r.kt)("li",{parentName:"ul"},"Use Sanitizers (ASAN, MSAN, LSAN) to check safety"),(0,r.kt)("li",{parentName:"ul"},"Testing (on Android, iOS, Windows, MacOS, Linux, Web)"),(0,r.kt)("li",{parentName:"ul"},"Run performance benchmarks"),(0,r.kt)("li",{parentName:"ul"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"flutter_rust_bridge_codegen")),(0,r.kt)("li",{parentName:"ul"},"Linters and code formatters"),(0,r.kt)("li",{parentName:"ul"},"Post-release tests (check the released binary)"),(0,r.kt)("li",{parentName:"ul"},"Test steps mentioned in quickstart"),(0,r.kt)("li",{parentName:"ul"},"...")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,'This library seems to be used by (I want to say "is used by" but I need to be humble ;) ) many people\n(as can be seen from ',(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/flutter_rust_bridge"},"pub.dev popularity"),", blogs on the Internet, etc).\nTherefore, bugs should be usually easily spotted and raised in the issue tracker.\nHowever, during the past two years, there have not been issues about weird memory issues, hitting undefined behavior, etc."),(0,r.kt)("p",null,"I also personally use flutter_rust_bridge heavily in my Flutter project,\nwhich is in production and it works quite well.\nIf I observe any problems, I will surely fix it in this library,\nbut again I have not seen any safety-related issues."),(0,r.kt)("h2",{id:"safety-of-unsafe"},"Safety of unsafe"),(0,r.kt)("p",null,"It is inevitable to write unsafe code, as long as we want to use Rust with another language.\nThe thing we can do and have done is,\nmake the unsafe blocks carefully limited & encapsulated,\nmake the code clear and well designed, use strong checkers in CI, etc.\nI am happy to see that, nobody reported bugs related to this!"),(0,r.kt)("p",null,"The vast majority of the code are written in safe Rust and (safe) Dart.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"unsafe")," code mainly happens when we need to leak a Rust Vec into a raw pointer,\nand later assemble it back, in order to pass it to the Dart side.\nThis is widely used pattern - there are official Rust doc, and answers on StackOverflow about this also have high votes."),(0,r.kt)("p",null,"In terms of safety, there are two categories of codecs, and you can freely choose whichever you like.\nOne category uses bare minimal unsafe code, and the other maximizes performance.\nBelow, we only discuss the latter - since it is the harder case."),(0,r.kt)("p",null,"The unsafe logic is made as separated as possible with other safe logic, with as clear semantics as possible.\nFor example, instead of combining all logic into a single bigger ",(0,r.kt)("inlineCode",{parentName:"p"},"RustOpaque")," Dart class,\nI choose to extract a ",(0,r.kt)("inlineCode",{parentName:"p"},"RustArc")," Dart class, which encapsulates the Rust ",(0,r.kt)("inlineCode",{parentName:"p"},"Arc")," inside it.\nThen, high-level ",(0,r.kt)("inlineCode",{parentName:"p"},"RustOpaque")," logic will be safe as long as it uses ",(0,r.kt)("inlineCode",{parentName:"p"},"RustArc"),"'s public API,\nand at the same time, ",(0,r.kt)("inlineCode",{parentName:"p"},"RustArc")," is easy to audit because it has a clear semantics."),(0,r.kt)("p",null,"As another example, without extra work, ",(0,r.kt)("inlineCode",{parentName:"p"},"DartOpaque")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"!Send")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"!Sync"),",\nbecause the underlying objects really cannot be used in other threads.\nBut we ",(0,r.kt)("inlineCode",{parentName:"p"},"unsafe impl Send/Sync"),", because we forbid users from touching or dropping it in other threads.\nIn V1, most logic were put inside the single ",(0,r.kt)("inlineCode",{parentName:"p"},"DartOpaque")," class, mixing things with this unsafe part.\nIn V2, this unsafe logic is extracted to ",(0,r.kt)("inlineCode",{parentName:"p"},"GuardedBox"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"DartOpaque")," becomes pure safe code."),(0,r.kt)("p",null,"These can be further seen in details in ",(0,r.kt)("a",{parentName:"p",href:"../contributing"},"the contributor guides"),"."),(0,r.kt)("p",null,"In addition, different parts are isolated. For example, if your project does not use opaque types,\nthen surely any code related to them will not be used at all."))}p.isMDXComponent=!0}}]);