"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[7809],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},61937:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o="justfile",l={unversionedId:"manual/integrate/template/tour/justfile",id:"manual/integrate/template/tour/justfile",title:"justfile",description:"This file defines the recipes for the [just] command runner, in a similar vein to make and Makefile. [just] is built using Rust and improves upon the traditional Makefile syntax with better support for",source:"@site/docs/manual/integrate/05-template/02-tour/04-justfile.md",sourceDirName:"manual/integrate/05-template/02-tour",slug:"/manual/integrate/template/tour/justfile",permalink:"/flutter_rust_bridge/manual/integrate/template/tour/justfile",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/05-template/02-tour/04-justfile.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"native/native.xcodeproj",permalink:"/flutter_rust_bridge/manual/integrate/template/tour/native-proj"},next:{title:"rust.cmake",permalink:"/flutter_rust_bridge/manual/integrate/template/tour/cmake"}},u={},s=[{value:"<code>just gen</code>",id:"just-gen",level:2},{value:"<code>just lint</code>",id:"just-lint",level:2},{value:"<code>just clean</code>",id:"just-clean",level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"justfile"},(0,a.kt)("inlineCode",{parentName:"h1"},"justfile")),(0,a.kt)("p",null,"This file defines the recipes for the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/casey/just"},"just")," command runner, in a similar vein to ",(0,a.kt)("inlineCode",{parentName:"p"},"make")," and Makefile. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/casey/just"},"just")," is built using Rust and improves upon the traditional Makefile syntax with better support for\nconditionals, arguments, cross-platform compatibility and more."),(0,a.kt)("p",null,"One non-trivial feature of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/casey/just"},"just")," utilized by this template is the\nconditional LLVM flag for MacOS. On certain setups, a ",(0,a.kt)("inlineCode",{parentName:"p"},"brew install llvm")," does not make the LLVM libraries visible to other executables, which causes problems for ",(0,a.kt)("inlineCode",{parentName:"p"},"ffigen"),", a C-to-Dart codegen that ",(0,a.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen")," uses under the hood."),(0,a.kt)("p",null,"Running ",(0,a.kt)("inlineCode",{parentName:"p"},"just")," by default runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"gen")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"lint")," tasks."),(0,a.kt)("h2",{id:"just-gen"},(0,a.kt)("inlineCode",{parentName:"h2"},"just gen")),(0,a.kt)("p",null,"Generates the Rust bindings and puts them into the correct folders.\nThe ",(0,a.kt)("a",{parentName:"p",href:"../generate"},"Generating new code")," section goes into detail how to modify\nthis task to perform side jobs as well."),(0,a.kt)("h2",{id:"just-lint"},(0,a.kt)("inlineCode",{parentName:"h2"},"just lint")),(0,a.kt)("p",null,"Runs the default linters for Dart and Rust."),(0,a.kt)("h2",{id:"just-clean"},(0,a.kt)("inlineCode",{parentName:"h2"},"just clean")),(0,a.kt)("p",null,"Runs the default clean commands for Flutter and Rust.\nUseful when you want to debug build-related issues."))}c.isMDXComponent=!0}}]);