"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[3697],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=o.createContext({}),c=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),b=n,f=d["".concat(i,".").concat(b)]||d[b]||p[b]||a;return r?o.createElement(f,s(s({ref:t},u),{},{components:r})):o.createElement(f,s({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var c=2;c<a;c++)s[c]=r[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},93030:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=r(87462),n=(r(67294),r(3905));const a={},s="Object pools",l={unversionedId:"guides/how-to/object-pool",id:"guides/how-to/object-pool",title:"Object pools",description:"When there are some big objects, or even non-encodable objects in the Rust side,",source:"@site/docs/guides/how-to/object-pool.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/object-pool",permalink:"/flutter_rust_bridge/guides/how-to/object-pool",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/object-pool.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Avoid regressions",permalink:"/flutter_rust_bridge/guides/how-to/regression"},next:{title:"Git Ignore",permalink:"/flutter_rust_bridge/guides/how-to/gitignore"}},i={},c=[{value:"Opaque Rust types",id:"opaque-rust-types",level:2},{value:"(Legacy) Real object pools",id:"legacy-real-object-pools",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"object-pools"},"Object pools"),(0,n.kt)("p",null,"When there are some big objects, or even non-encodable objects in the Rust side,\nyou may not want (or impossible) to copy them between Rust and Dart over and over again."),(0,n.kt)("h2",{id:"opaque-rust-types"},"Opaque Rust types"),(0,n.kt)("p",null,"This is, by default, handled via ",(0,n.kt)("a",{parentName:"p",href:"../types/arbitrary/rust-auto-opaque"},"opaque Rust types"),",\nand there is ",(0,n.kt)("em",{parentName:"p"},"no operation")," needed to take care of the scenario."),(0,n.kt)("h2",{id:"legacy-real-object-pools"},"(Legacy) Real object pools"),(0,n.kt)("p",null,'However, for legacy reasons (flutter_rust_bridge V1) and for completeness,\nhere we also document an alternative solution (object pool):\nBy using object pools,\nyou only pass around a "object handle" (just a few integers) between Rust and Dart,\nand the Rust side will convert that handle from and to the real object.\nFor installation, please refer to ',(0,n.kt)("a",{parentName:"p",href:"cancel"},"cancelable tasks"),"."))}p.isMDXComponent=!0}}]);