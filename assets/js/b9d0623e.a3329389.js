"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[4620],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>b});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=p(r),b=a,y=d["".concat(s,".").concat(b)]||d[b]||c[b]||o;return r?n.createElement(y,i(i({ref:t},l),{},{components:r})):n.createElement(y,i({ref:t},l))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},49228:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={},i="Opaque inside translatable",u={unversionedId:"guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable",id:"guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable",title:"Opaque inside translatable",description:"There is no need to memorize anything here (or anything in doc) -",source:"@site/docs/guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable.md",sourceDirName:"guides/types/arbitrary/rust-auto-opaque",slug:"/guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Properties (Accessors)",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/properties"},next:{title:"Ownership",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/ownership"}},s={},p=[],l={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"opaque-inside-translatable"},"Opaque inside translatable"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"There is no need to memorize anything here (or anything in doc) -\nthe code generator will provide warnings when detecting non-best-practices.")),(0,a.kt)("p",null,"Suppose you want to have a translatable struct, and it has an (auto) opaque field:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct A { pub b: B }\n\n// Suppose it is opaque\npub struct B { ... }\n")),(0,a.kt)("p",null,"If you want to use the same object of type ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," multiple times,\nthen it is suggested (and flutter_rust_bridge will automatically hint you about that)\nto add an ",(0,a.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque<...>")," wrapper on it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"-    pub b: B,\n+    pub b: RustAutoOpaque<B>,\n")),(0,a.kt)("p",null,"(Optional) explanations:\nThis is because, shortly speaking,\nthe original version needs to have an owned ",(0,a.kt)("inlineCode",{parentName:"p"},"B"),", and thus the ",(0,a.kt)("inlineCode",{parentName:"p"},"B")," object cannot be used later.\nOn the other hand, the updated version, which uses ",(0,a.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque")," thus ",(0,a.kt)("inlineCode",{parentName:"p"},"Arc"),", will only require shared ownership."),(0,a.kt)("p",null,"(Optional) In the future, we may utilize ",(0,a.kt)("a",{parentName:"p",href:"../../../misc-features/proxy"},"this feature"),",\nthen the scenario above can be automatically handled without any change to ",(0,a.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque"),"."))}c.isMDXComponent=!0}}]);