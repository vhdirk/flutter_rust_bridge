"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[9722],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(r),y=a,b=d["".concat(s,".").concat(y)]||d[y]||c[y]||o;return r?n.createElement(b,u(u({ref:t},l),{},{components:r})):n.createElement(b,u({ref:t},l))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,u=new Array(o);u[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,u[1]=i;for(var p=2;p<o;p++)u[p]=r[p];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},30165:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={},u="Overview",i={unversionedId:"guides/types/arbitrary/rust-auto-opaque/overview",id:"guides/types/arbitrary/rust-auto-opaque/overview",title:"Overview",description:"This feature, sometimes called RustAutoOpaque throughout the documentation,",source:"@site/docs/guides/types/arbitrary/rust-auto-opaque/overview.md",sourceDirName:"guides/types/arbitrary/rust-auto-opaque",slug:"/guides/types/arbitrary/rust-auto-opaque/overview",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/overview",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/arbitrary/rust-auto-opaque/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Automatic arbitrary Rust type",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/"},next:{title:"Using underlying data",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/using-data"}},s={},p=[{value:"Example",id:"example",level:2}],l={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview"},"Overview"),(0,a.kt)("p",null,"This feature, sometimes called ",(0,a.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque")," throughout the documentation,\nallows arbitrary Rust type to be used without manual intervention,\nby representing arbitrary Rust object as (smart) pointers in Dart."),(0,a.kt)("p",null,"Different from non-opaque types, opaque types are not copied/moved/reconstructed at all.\nFor example, if you pass around ",(0,a.kt)("inlineCode",{parentName:"p"},"RwLock<Mutex<ArbitraryData>")," in arguments and return values,\nyou will get the exact ",(0,a.kt)("em",{parentName:"p"},"same")," ",(0,a.kt)("inlineCode",{parentName:"p"},"RwLock<ArbitraryData>")," object."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Suppose you have a type that is not encodable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MyNonEncodableType {\n    // e.g., a temporary directory, a file descriptor, a native resource, a lock, a channel, ...\n    sample_non_encodable_field: tempdir::TempDir,\n}\n")),(0,a.kt)("p",null,"Then you can have Rust functions and methods on it.\nMost, if not all, features of flutter_rust_bridge are supported,\nand here are a few examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn create() -> MyNonEncodableType { ... }\n\npub fn consume(obj: MyNonEncodableType) { ... }\n\npub fn borrow(obj: &MyNonEncodableType) { ... }\n\npub fn mutable_borrow(obj: &mut MyNonEncodableType) { ... }\n\nimpl MyNonEncodableType {\n    // Or `self`, `&mut self`\n    pub fn methods_on_it(&self) { ... }\n}\n")),(0,a.kt)("p",null,"They can be called in Dart:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"var object = await create();\nawait borrow(object);\nawait mutable_borrow(object);\nawait consume(object);\n")),(0,a.kt)("p",null,"P.S. As for how it is implemented as well as the design towards safety,\nplease refer to ",(0,a.kt)("a",{parentName:"p",href:"../../../contributing/submodules/rust-opaque"},"this doc")))}c.isMDXComponent=!0}}]);