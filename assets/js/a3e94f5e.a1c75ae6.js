"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[387],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(r),c=n,g=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return r?a.createElement(g,l(l({ref:t},p),{},{components:r})):a.createElement(g,l({ref:t},p))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},81281:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const i={},l="What's new in V2",o={unversionedId:"guides/miscellaneous/whats-new",id:"guides/miscellaneous/whats-new",title:"What's new in V2",description:"Upgrade guide",source:"@site/docs/guides/miscellaneous/whats-new.md",sourceDirName:"guides/miscellaneous",slug:"/guides/miscellaneous/whats-new",permalink:"/flutter_rust_bridge/guides/miscellaneous/whats-new",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/miscellaneous/whats-new.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/flutter_rust_bridge/guides/miscellaneous/deployment"},next:{title:"Upgrade",permalink:"/flutter_rust_bridge/guides/miscellaneous/upgrade/"}},s={},u=[{value:"Upgrade guide",id:"upgrade-guide",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Primary changes",id:"primary-changes",level:3},{value:"More changes",id:"more-changes",level:3},{value:"From 1.x to 2.0.0-dev.0",id:"from-1x-to-200-dev0",level:4},{value:"From 2.0.0-dev.0 to 2.0.0",id:"from-200-dev0-to-200",level:4}],p={toc:u};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"whats-new-in-v2"},"What's new in V2"),(0,n.kt)("h2",{id:"upgrade-guide"},"Upgrade guide"),(0,n.kt)("p",null,"To upgrade, please refer to ",(0,n.kt)("a",{parentName:"p",href:"upgrade/v2"},"the upgrade guide"),"."),(0,n.kt)("h2",{id:"changelog"},"Changelog"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"For a more vivid illustration, I suggest glancing through ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge"},"the homepage"),",\nwhere there are lists of features (advantages) and a quick show-me-the-code.")),(0,n.kt)("h3",{id:"primary-changes"},"Primary changes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"From 1.x to 2.0.0-dev.0:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Rapid setup"),": Only a one-liner command to integrate into your project."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Arbitrary types"),": Use arbitrary Rust and Dart types without manual intervention, even if they are not serializable or non-clone (previously need some manual intervention)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Async Rust"),": Support asynchronous Rust (",(0,n.kt)("inlineCode",{parentName:"li"},"async fn"),"), in addition to sync Rust / async Dart / sync Dart."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Rust call Dart"),": Allow Rust to call Dart functions (previously only allow Dart to call Rust)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Support whole folders as inputs"),": Previously only support one single file (e.g. ",(0,n.kt)("inlineCode",{parentName:"li"},"api.rs"),")."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Use libraries/tools in Flutter/Rust"),": All existing libraries, Flutter debuggers, ... Nothing to stop you from using them."))),(0,n.kt)("li",{parentName:"ul"},"From 2.0.0-dev.0 to 2.0.0:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parsing third-party packages"),": Scan and use existing Rust packages in Dart (experimental)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Lifetimes"),": Support returning types with lifetime specifiers (experimental)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Traits"),": Support traits as base classes and trait objects."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"New codec"),": A new codec, ",(0,n.kt)("inlineCode",{parentName:"li"},"SSE"),", which is several times faster under some workloads."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Others (>200 PRs)"),": Auto and manual accessors, object proxies, user-defined serializers, developer experience, deadlock-free auto locking, Rust initializers, included batteries, renaming and ignoring, improving streams, more types, ...")))),(0,n.kt)("h3",{id:"more-changes"},"More changes"),(0,n.kt)("h4",{id:"from-1x-to-200-dev0"},"From 1.x to 2.0.0-dev.0"),(0,n.kt)("details",null,(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Overhaul the whole internal codebase",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Making it clear / modualized / elegant, enabling quick development of future features"),(0,n.kt)("li",{parentName:"ul"},"Unsafe code are further mimimalized and encapsulated"),(0,n.kt)("li",{parentName:"ul"},"Details are omitted here, since it does not affect end users reading this CHANGELOG.md"))),(0,n.kt)("li",{parentName:"ul"},"Reduce the dependency of the ",(0,n.kt)("inlineCode",{parentName:"li"},"flutter_rust_bridge")," package to the bare minimum."),(0,n.kt)("li",{parentName:"ul"},"Refactor the APIs, making it more developer friendly."),(0,n.kt)("li",{parentName:"ul"},"Refactor the documentation."),(0,n.kt)("li",{parentName:"ul"},"Refactor the tests.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Add sanitizers (ASAN, LSAN, ...) in addition to existing Valgrind into CI."),(0,n.kt)("li",{parentName:"ul"},"Automatically triple the tests, e.g. can auto ensure Rust-async works well since it has the same number of tests as the Rust non-async mode."),(0,n.kt)("li",{parentName:"ul"},"Automatically generate some e2e exhaustive test cases."),(0,n.kt)("li",{parentName:"ul"},"Add some unit tests for ",(0,n.kt)("inlineCode",{parentName:"li"},"frb_codegen"),"."))),(0,n.kt)("li",{parentName:"ul"},"Details of out-of-the-box usage",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Add scaffolding commands (apply to existing project or create new project in one command)."),(0,n.kt)("li",{parentName:"ul"},"Integrate with Cargokit (setup the build environment and hooks automatically)."),(0,n.kt)("li",{parentName:"ul"},"Provide defaults, while keeping customizability (e.g. auto find and load the dynamic libraries by default, while allowing full manual control)."))),(0,n.kt)("li",{parentName:"ul"},"Improve error stack trace of ",(0,n.kt)("inlineCode",{parentName:"li"},"frb_codegen")," (replace ",(0,n.kt)("inlineCode",{parentName:"li"},"thiserror")," with ",(0,n.kt)("inlineCode",{parentName:"li"},"anyhow"),")."),(0,n.kt)("li",{parentName:"ul"},"Generate hashCode/equals for non-freezed structs."),(0,n.kt)("li",{parentName:"ul"},"Remove global internal thread pool, thus users can arbitrarily customize thread pool easily."),(0,n.kt)("li",{parentName:"ul"},"Refactor the scripts for repository contributors and the CI."),(0,n.kt)("li",{parentName:"ul"},"Automatically install ",(0,n.kt)("inlineCode",{parentName:"li"},"cargo expand")," if not installed."),(0,n.kt)("li",{parentName:"ul"},"Fix bugs."))),(0,n.kt)("h4",{id:"from-200-dev0-to-200"},"From 2.0.0-dev.0 to 2.0.0"),(0,n.kt)("p",null,"Please refer to the CHANGELOG for >200 PRs."))}m.isMDXComponent=!0}}]);