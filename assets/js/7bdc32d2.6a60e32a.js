"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[2414],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,b=p["".concat(s,".").concat(m)]||p[m]||c[m]||a;return n?i.createElement(b,l(l({ref:t},d),{},{components:n})):i.createElement(b,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},97773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=n(87462),r=(n(67294),n(3905));const a={},l="Windows & Linux",o={unversionedId:"manual/integrate/library/platform-setup/windows-and-linux",id:"manual/integrate/library/platform-setup/windows-and-linux",title:"Windows & Linux",description:"Windows and Linux both use CMake for their build system,",source:"@site/docs/manual/integrate/07-library/03-platform-setup/01-windows-and-linux.md",sourceDirName:"manual/integrate/07-library/03-platform-setup",slug:"/manual/integrate/library/platform-setup/windows-and-linux",permalink:"/flutter_rust_bridge/manual/integrate/library/platform-setup/windows-and-linux",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/07-library/03-platform-setup/01-windows-and-linux.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Platform setup",permalink:"/flutter_rust_bridge/manual/integrate/library/platform-setup/"},next:{title:"iOS & macOS",permalink:"/flutter_rust_bridge/manual/integrate/library/platform-setup/ios-and-macos"}},s={},u=[{value:"CMake",id:"cmake",level:2},{value:"Linux CMakeLists.txt (<code>/packages/flutter_library_name/linux/CMakeLists.txt</code>)",id:"linux-cmakeliststxt-packagesflutter_library_namelinuxcmakeliststxt",level:3},{value:"Windows CMakeLists.txt (<code>/packages/flutter_library_name/windows/CMakeLists.txt</code>)",id:"windows-cmakeliststxt-packagesflutter_library_namewindowscmakeliststxt",level:3},{value:"Platform-Specific Peculiarities",id:"platform-specific-peculiarities",level:3},{value:"<code>.gitignore</code>",id:"gitignore",level:2},{value:"Build Script (<code>/scripts/build-other.sh</code>)",id:"build-script-scriptsbuild-othersh",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"windows--linux"},"Windows & Linux"),(0,r.kt)("p",null,"Windows and Linux both use CMake for their build system,\nso this page will walk you through setting up CMake for Windows/Linux."),(0,r.kt)("p",null,"Also, this page will introduce the windows & linux build script\nto compile your Rust library to these platforms."),(0,r.kt)("h2",{id:"cmake"},"CMake"),(0,r.kt)("p",null,"CMake happens to be by far the easiest build process to set up\nof of all the Flutter supported platforms."),(0,r.kt)("p",null,"Replace all instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"library_name")," below with your library name.\nAlso, replace other variables (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"YourGitHubAccount")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"repo_name"),") as needed."),(0,r.kt)("h3",{id:"linux-cmakeliststxt-packagesflutter_library_namelinuxcmakeliststxt"},"Linux CMakeLists.txt (",(0,r.kt)("inlineCode",{parentName:"h3"},"/packages/flutter_library_name/linux/CMakeLists.txt"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cmake"},'set(LibraryVersion "library_name-v0.0.0") # generated; do not edit\n\n# The Flutter tooling requires that developers have CMake 3.10 or later\n# installed. You should not increase this version, as doing so will cause\n# the plugin to fail to compile for some customers of the plugin.\ncmake_minimum_required(VERSION 3.10)\n\n# Project-level configuration.\nset(PROJECT_NAME "flutter_library_name")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# Download the binaries if they are not already present.\nset(LibRoot "${CMAKE_CURRENT_SOURCE_DIR}/${LibraryVersion}")\nset(ArchivePath "${LibRoot}.tar.gz")\nif(NOT EXISTS ${ArchivePath})\n  file(DOWNLOAD\n    "https://github.com/YourGitHubAccount/repo_name/releases/download/${LibraryVersion}/other.tar.gz"\n    ${ArchivePath}\n    TLS_VERIFY ON\n  )\nendif()\n\n# Extract the binaries, overriding any already present.\nfile(REMOVE_RECURSE ${LibRoot})\nfile(MAKE_DIRECTORY ${LibRoot})\nexecute_process(\n  COMMAND ${CMAKE_COMMAND} -E tar xzf ${ArchivePath}\n  WORKING_DIRECTORY ${LibRoot}\n)\n\n# List of absolute paths to libraries that should be bundled with the plugin.\n# This list could contain prebuilt libraries, or libraries created by an\n# external build triggered from this build file.\nset(flutter_library_name_bundled_libraries\n  "${LibRoot}/${FLUTTER_TARGET_PLATFORM}/liblibrary_name.so"\n  PARENT_SCOPE\n)\n')),(0,r.kt)("h3",{id:"windows-cmakeliststxt-packagesflutter_library_namewindowscmakeliststxt"},"Windows CMakeLists.txt (",(0,r.kt)("inlineCode",{parentName:"h3"},"/packages/flutter_library_name/windows/CMakeLists.txt"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cmake"},'set(LibraryVersion "library_name-v0.0.0") # generated; do not edit\n\n# TODO Remove this workaround once Flutter supports Windows ARM.\n# https://github.com/flutter/flutter/issues/116196\nset(FLUTTER_TARGET_PLATFORM windows-x64)\n\n# The Flutter tooling requires that developers have a version of Visual Studio\n# installed that includes CMake 3.14 or later. You should not increase this\n# version, as doing so will cause the plugin to fail to compile for some\n# customers of the plugin.\ncmake_minimum_required(VERSION 3.14)\n\n# Project-level configuration.\nset(PROJECT_NAME "flutter_library_name")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# Download the binaries if they are not already present.\nset(LibRoot "${CMAKE_CURRENT_SOURCE_DIR}/${LibraryVersion}")\nset(ArchivePath "${LibRoot}.tar.gz")\nif(NOT EXISTS ${ArchivePath})\n  file(DOWNLOAD\n    "https://github.com/YourGitHubAccount/repo_name/releases/download/${LibraryVersion}/other.tar.gz"\n    ${ArchivePath}\n    TLS_VERIFY ON\n  )\nendif()\n\n# Extract the binaries, overriding any already present.\nfile(REMOVE_RECURSE ${LibRoot})\nfile(MAKE_DIRECTORY ${LibRoot})\nexecute_process(\n  COMMAND ${CMAKE_COMMAND} -E tar xzf ${ArchivePath}\n  WORKING_DIRECTORY ${LibRoot}\n)\n\n# List of absolute paths to libraries that should be bundled with the plugin.\n# This list could contain prebuilt libraries, or libraries created by an\n# external build triggered from this build file.\nset(flutter_library_name_bundled_libraries\n  "${LibRoot}/${FLUTTER_TARGET_PLATFORM}/library_name.dll"\n  PARENT_SCOPE\n)\n')),(0,r.kt)("h3",{id:"platform-specific-peculiarities"},"Platform-Specific Peculiarities"),(0,r.kt)("p",null,"There exists a few differences between the Linux and Windows ",(0,r.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt"),"s:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The minimum CMake version supported"),(0,r.kt)("li",{parentName:"ol"},"At the time of writing, Windows CMake does not yet have a builtin ",(0,r.kt)("inlineCode",{parentName:"li"},"FLUTTER_TARGET_PLATFORM")," variable; thus, we need to define a dummy version of the variable. See ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/issues/116196"},"here")," for updates on this issue"),(0,r.kt)("li",{parentName:"ol"},"On linux, dynamic library names follow the form of ",(0,r.kt)("inlineCode",{parentName:"li"},"liblibrary_name.so")," and on Windows, dynamic library names follow the form of ",(0,r.kt)("inlineCode",{parentName:"li"},"library_name.dll"))),(0,r.kt)("h2",{id:"gitignore"},(0,r.kt)("inlineCode",{parentName:"h2"},".gitignore")),(0,r.kt)("p",null,"If you choose to have a .gitignore in your ",(0,r.kt)("inlineCode",{parentName:"p"},"linux/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"windows/")," directories, here is what the author of this page uses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gitignore"},"# Set up as allowlist\n*\n\n# Allowed files\n!.gitignore\n!CMakeLists.txt\n")),(0,r.kt)("h2",{id:"build-script-scriptsbuild-othersh"},"Build Script (",(0,r.kt)("inlineCode",{parentName:"h2"},"/scripts/build-other.sh"),")"),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"library_name")," below as needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Setup\nBUILD_DIR=platform-build\nmkdir $BUILD_DIR\ncd $BUILD_DIR\n\n# Install build dependencies\ncargo install cargo-zigbuild\ncargo install cargo-xwin\n\nzig_build () {\n    local TARGET="$1"\n    local PLATFORM_NAME="$2"\n    local LIBNAME="$3"\n    rustup target add "$TARGET"\n    cargo zigbuild --target "$TARGET" -r\n    mkdir "$PLATFORM_NAME"\n    cp "../target/$TARGET/release/$LIBNAME" "$PLATFORM_NAME/"\n}\n\nwin_build () {\n    local TARGET="$1"\n    local PLATFORM_NAME="$2"\n    local LIBNAME="$3"\n    rustup target add "$TARGET"\n    cargo xwin build --target "$TARGET" -r\n    mkdir "$PLATFORM_NAME"\n    cp "../target/$TARGET/release/$LIBNAME" "$PLATFORM_NAME/"\n}\n\n# Build all the dynamic libraries\nLINUX_LIBNAME=liblibrary_name.so\nzig_build aarch64-unknown-linux-gnu linux-arm64 $LINUX_LIBNAME\nzig_build x86_64-unknown-linux-gnu linux-x64 $LINUX_LIBNAME\nWINDOWS_LIBNAME=library_name.dll\nwin_build aarch64-pc-windows-msvc windows-arm64 $WINDOWS_LIBNAME\nwin_build x86_64-pc-windows-msvc windows-x64 $WINDOWS_LIBNAME\n\n# Archive the dynamic libs\ntar -czvf other.tar.gz linux-* windows-*\n\n# Cleanup\nrm -rf linux-* windows-*\n')))}c.isMDXComponent=!0}}]);