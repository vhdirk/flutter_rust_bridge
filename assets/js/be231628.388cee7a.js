"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[9028],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>d});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),_=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},c=function(e){var n=_(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=_(r),d=a,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return r?t.createElement(f,s(s({ref:n},c),{},{components:r})):t.createElement(f,s({ref:n},c))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var _=2;_<i;_++)s[_]=r[_];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},86922:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>_});var t=r(87462),a=(r(67294),r(3905));const i={},s="Dart-only base",o={unversionedId:"manual/integrate/library/creating-libraries/dart-only",id:"manual/integrate/library/creating-libraries/dart-only",title:"Dart-only base",description:"This page details how to set up the initial structure of our monorepo,",source:"@site/docs/manual/integrate/07-library/02-creating-libraries/01-dart-only.md",sourceDirName:"manual/integrate/07-library/02-creating-libraries",slug:"/manual/integrate/library/creating-libraries/dart-only",permalink:"/flutter_rust_bridge/manual/integrate/library/creating-libraries/dart-only",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/07-library/02-creating-libraries/01-dart-only.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creating the libraries",permalink:"/flutter_rust_bridge/manual/integrate/library/creating-libraries/"},next:{title:"Flutter wrapper",permalink:"/flutter_rust_bridge/manual/integrate/library/creating-libraries/flutter-wrapper"}},l={},_=[{value:"Initialization script",id:"initialization-script",level:2}],c={toc:_};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dart-only-base"},"Dart-only base"),(0,a.kt)("p",null,"This page details how to set up the initial structure of our monorepo,\nincluding the crucial Dart-only base package."),(0,a.kt)("h2",{id:"initialization-script"},"Initialization script"),(0,a.kt)("p",null,"This script creates a new monorepo named ",(0,a.kt)("inlineCode",{parentName:"p"},"$LIBNAME")," in the current working directory\nand initializes it with some needed files.\nThe following script assumes a bash shell, which you should make sure to use to run it.\nAlso, the script generates some ffi convenience files in your Dart ",(0,a.kt)("inlineCode",{parentName:"p"},"src/")," which you should\ncheck out after the script completes."),(0,a.kt)("p",null,"After the script runs, change the ",(0,a.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," dependency in ",(0,a.kt)("inlineCode",{parentName:"p"},"/packages/library_name/pubspec.yaml")," to the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  flutter_rust_bridge: "1.62.1"\n')),(0,a.kt)("p",null,"Note: If you so choose, you can update the ",(0,a.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," versions in\n",(0,a.kt)("inlineCode",{parentName:"p"},"/packages/library_name/native/Cargo.toml")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/packages/library_name/pubspec.yaml"),"\nto the latest version available, but newer versions are not guaranteed to work\nwith this section of the guide due to a lack of CI testing.\nVersion 1.62.1 is known to work with this guide as-is.\nCI testing is planned once the Native Assets feature is released."),(0,a.kt)("p",null,"Finally, change the variables at the top of the script to fit your needs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'LIBNAME=library_name # snake_case\nDART_CLASS_NAME=LibraryName # probably is PascalCase version of $LIBNAME\n\n# Monorepo setup\nmkdir -p $LIBNAME/packages\ncd $LIBNAME\ngit init\n\ncat << EOF >> Cargo.toml\n[workspace]\nmembers = ["packages/$LIBNAME/native"]\nEOF\n\ncat << EOF >> analysis_options.yaml\n# TODO change the below options/lints as you see fit\nanalyzer:\n  exclude:\n    - \'**.freezed.dart\'\n    - \'**.g.dart\'\n  language:\n    strict-inference: true\n    strict-raw-types: true\n  errors:\n    invalid_annotation_target: ignore\n\nlinter:\n  rules:\n    # Custom lints\n    - prefer_single_quotes\n\n    # Core Dart lints\n    - avoid_empty_else\n    - avoid_relative_lib_imports\n    - avoid_shadowing_type_parameters\n    - avoid_types_as_parameter_names\n    - await_only_futures\n    - camel_case_extensions\n    - camel_case_types\n    - curly_braces_in_flow_control_structures\n    - depend_on_referenced_packages\n    - empty_catches\n    - file_names\n    - hash_and_equals\n    - iterable_contains_unrelated_type\n    - list_remove_unrelated_type\n    - no_duplicate_case_values\n    - non_constant_identifier_names\n    - null_check_on_nullable_type_parameter\n    - package_prefixed_library_names\n    - prefer_generic_function_type_aliases\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_iterable_whereType\n    - prefer_typing_uninitialized_variables\n    - provide_deprecation_message\n    - unnecessary_overrides\n    - unrelated_type_equality_checks\n    - valid_regexps\n    - void_checks\n\n    # Recommended Dart lints\n    - always_require_non_null_named_parameters\n    - annotate_overrides\n    - avoid_function_literals_in_foreach_calls\n    - avoid_init_to_null\n    - avoid_null_checks_in_equality_operators\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    - avoid_returning_null_for_void\n    - avoid_single_cascade_in_expression_statements\n    - constant_identifier_names\n    - control_flow_in_finally\n    - empty_constructor_bodies\n    - empty_statements\n    - exhaustive_cases\n    - implementation_imports\n    - library_names\n    - library_prefixes\n    - library_private_types_in_public_api\n    - no_leading_underscores_for_library_prefixes\n    - no_leading_underscores_for_local_identifiers\n    - null_closures\n    - overridden_fields\n    - package_names\n    - prefer_adjacent_string_concatenation\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_contains\n    - prefer_equal_for_default_values\n    - prefer_final_fields\n    - prefer_for_elements_to_map_fromIterable\n    - prefer_function_declarations_over_variables\n    - prefer_if_null_operators\n    - prefer_initializing_formals\n    - prefer_inlined_adds\n    - prefer_interpolation_to_compose_strings\n    - prefer_is_not_operator\n    - prefer_null_aware_operators\n    - prefer_spread_collections\n    - prefer_void_to_null\n    - recursive_getters\n    - slash_for_doc_comments\n    - type_init_formals\n    - unnecessary_brace_in_string_interps\n    - unnecessary_const\n    - unnecessary_constructor_name\n    - unnecessary_getters_setters\n    - unnecessary_late\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_null_in_if_null_operators\n    - unnecessary_nullable_for_final_variable_declarations\n    - unnecessary_string_escapes\n    - unnecessary_string_interpolations\n    - unnecessary_this\n    - use_function_type_syntax_for_parameters\n    - use_rethrow_when_possible\n\n    # Flutter lints\n    - avoid_print\n    - avoid_unnecessary_containers\n    - avoid_web_libraries_in_flutter\n    - no_logic_in_create_state\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    - sized_box_for_whitespace\n    - sort_child_properties_last\n    - use_build_context_synchronously\n    - use_full_hex_values_for_flutter_colors\n    - use_key_in_widget_constructors\nEOF\n\ncat << EOF >> .gitignore\n# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\npubspec.lock\npubspec_overrides.yaml\n**/doc/api/\n.dart_tool/\n.packages\nbuild/\n.pub-cache/\n.pub/\n.flutter-plugins\n.flutter-plugins-dependencies\n\n# Rust related\n/target/\n/Cargo.lock\n/platform-build\nEOF\n\n# Dart setup\nDART_BASE=packages/$LIBNAME\ndart create --template=package $DART_BASE\n(cd $DART_BASE && dart pub add flutter_rust_bridge ffi && dart pub add ffigen --dev)\nrm $DART_BASE/analysis_options.yaml # we provide our own in repo root\n( # ffi setup\ncd $DART_BASE\nmkdir -p lib/src/ffi\n\ncat << EOF >> lib/src/ffi/stub.dart\nimport \'package:$LIBNAME/src/bridge_generated.dart\';\n\n/// Represents the external library for $LIBNAME\n///\n/// Will be a DynamicLibrary for dart:io or WasmModule for dart:html\ntypedef ExternalLibrary = Object;\n\n$DART_CLASS_NAME createWrapperImpl(ExternalLibrary lib) =>\n    throw UnimplementedError();\nEOF\n\ncat << EOF >> lib/src/ffi/io.dart\nimport \'dart:ffi\';\n\nimport \'package:$LIBNAME/src/bridge_generated.dart\';\n\ntypedef ExternalLibrary = DynamicLibrary;\n\n$DART_CLASS_NAME createWrapperImpl(ExternalLibrary dylib) =>\n    ${DART_CLASS_NAME}Impl(dylib);\nEOF\n\ncat << EOF >> lib/src/ffi/web.dart\nimport \'package:$LIBNAME/src/bridge_generated.dart\';\nimport \'package:flutter_rust_bridge/flutter_rust_bridge.dart\';\n\ntypedef ExternalLibrary = WasmModule;\n\n$DART_CLASS_NAME createWrapperImpl(ExternalLibrary module) =>\n    ${DART_CLASS_NAME}Impl.wasm(module);\nEOF\n\ncat << EOF >> lib/src/ffi.dart\nimport \'bridge_generated.dart\';\nimport \'ffi/stub.dart\'\n    if (dart.library.io) \'ffi/io.dart\'\n    if (dart.library.js_interop) \'ffi/web.dart\';\n\n$DART_CLASS_NAME? _wrapper;\n\n$DART_CLASS_NAME createWrapper(ExternalLibrary lib) {\n  _wrapper ??= createWrapperImpl(lib);\n  return _wrapper!;\n}\nEOF\n\necho "export \'src/ffi.dart\';" >> lib/$LIBNAME.dart\n)\n\n# Rust setup\nRUST_BASE=$DART_BASE/native\nmkdir -p $RUST_BASE/src\n\ncat << EOF >> $RUST_BASE/build.rs\nuse lib_flutter_rust_bridge_codegen::{\n    config_parse, frb_codegen, get_symbols_if_no_duplicates, RawOpts,\n};\n\nconst RUST_INPUT: &str = "src/api.rs";\nconst DART_OUTPUT: &str = "../lib/src/bridge_generated.dart";\n\nconst IOS_C_OUTPUT: &str = "../../flutter_$LIBNAME/ios/Classes/frb.h";\nconst MACOS_C_OUTPUT_DIR: &str = "../../flutter_$LIBNAME/macos/Classes/";\n\nfn main() {\n    // Tell Cargo that if the input Rust code changes, rerun this build script\n    println!("cargo:rerun-if-changed={}", RUST_INPUT);\n\n    // Options for frb_codegen\n    let raw_opts = RawOpts {\n        rust_input: vec![RUST_INPUT.to_string()],\n        dart_output: vec![DART_OUTPUT.to_string()],\n        c_output: Some(vec![IOS_C_OUTPUT.to_string()]),\n        extra_c_output_path: Some(vec![MACOS_C_OUTPUT_DIR.to_string()]),\n        inline_rust: true,\n        wasm: true,\n        ..Default::default()\n    };\n\n    // Generate Rust & Dart ffi bridges\n    let configs = config_parse(raw_opts);\n    let all_symbols = get_symbols_if_no_duplicates(&configs).unwrap();\n    for config in configs.iter() {\n        frb_codegen(config, &all_symbols).unwrap();\n    }\n\n    // Format the generated Dart code\n    _ = std::process::Command::new("flutter")\n        .arg("format")\n        .arg("..")\n        .spawn();\n}\nEOF\n\ncat << EOF >> $RUST_BASE/.gitignore\n# Rust library related\nCargo.lock\ntarget\nEOF\n\ncat << EOF >> $RUST_BASE/Cargo.toml\n[package]\nname = "$LIBNAME"\nversion = "0.0.0"\nedition = "2018"\n\n[lib]\ncrate-type = ["staticlib", "cdylib"]\n\n[build-dependencies]\nflutter_rust_bridge_codegen = "1.62.*"\n\n[dependencies]\nflutter_rust_bridge = "1.62.*"\nEOF\n\ntouch $RUST_BASE/src/api.rs\n\ncat << EOF >> $RUST_BASE/src/lib.rs\nmod api;\nEOF\n\ncargo build\n')))}p.isMDXComponent=!0}}]);