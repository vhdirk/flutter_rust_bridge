"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[3486],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=p(r),y=o,b=d["".concat(s,".").concat(y)]||d[y]||c[y]||a;return r?n.createElement(b,i(i({ref:t},l),{},{components:r})):n.createElement(b,i({ref:t},l))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},43663:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={},i="Ownership",u={unversionedId:"guides/types/arbitrary/rust-auto-opaque/ownership",id:"guides/types/arbitrary/rust-auto-opaque/ownership",title:"Ownership",description:"As expected, the MyNonEncodableType, &MyNonEncodableType, &mut MyNonEncodableType",source:"@site/docs/guides/types/arbitrary/rust-auto-opaque/ownership.md",sourceDirName:"guides/types/arbitrary/rust-auto-opaque",slug:"/guides/types/arbitrary/rust-auto-opaque/ownership",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/ownership",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/arbitrary/rust-auto-opaque/ownership.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Opaque inside translatable",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable"},next:{title:"Dispose",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/dispose"}},s={},p=[],l={toc:p};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ownership"},"Ownership"),(0,o.kt)("p",null,"As expected, the ",(0,o.kt)("inlineCode",{parentName:"p"},"MyNonEncodableType"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"&MyNonEncodableType"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"&mut MyNonEncodableType"),"\nmeans the standard Rust ownership things - owned, borrowed, mutable borrowed.\nFor example, in normal Rust, we cannot mutably borrow the same object twice at the same time.\nWhen doing so for ",(0,o.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque")," objects, you will receive a runtime error."),(0,o.kt)("p",null,"In short, just write normal Rust code, and you are safe.\nAnything that violates Rust's model or safety will be caught and provide a runtime error,\ninstead of the dangerous undefined behavior."))}c.isMDXComponent=!0}}]);