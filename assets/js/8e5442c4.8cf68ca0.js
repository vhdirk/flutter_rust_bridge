"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8095],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(y,u(u({ref:t},l),{},{components:n})):r.createElement(y,u({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,u=new Array(a);u[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,u[1]=i;for(var s=2;s<a;s++)u[s]=n[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={},u="Synchronous Rust (thread pool)",i={unversionedId:"guides/concurrency/sync-rust",id:"guides/concurrency/sync-rust",title:"Synchronous Rust (thread pool)",description:"You can write normal (non-async) Rust functions (fn f() {}).",source:"@site/docs/guides/concurrency/sync-rust.md",sourceDirName:"guides/concurrency",slug:"/guides/concurrency/sync-rust",permalink:"/flutter_rust_bridge/guides/concurrency/sync-rust",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/concurrency/sync-rust.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/flutter_rust_bridge/guides/concurrency/overview"},next:{title:"Asynchronous Rust",permalink:"/flutter_rust_bridge/guides/concurrency/async-rust"}},c={},s=[{value:"Example",id:"example",level:2},{value:"Customization",id:"customization",level:2},{value:"With synchronous Dart mode",id:"with-synchronous-dart-mode",level:2}],l={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"synchronous-rust-thread-pool"},"Synchronous Rust (thread pool)"),(0,o.kt)("p",null,"You can write normal (non-",(0,o.kt)("inlineCode",{parentName:"p"},"async"),") Rust functions (",(0,o.kt)("inlineCode",{parentName:"p"},"fn f() {}"),").\nMultiple Rust functions can be running at the same time,\nand they will be running concurrently.\nThis is because by default we use a thread pool to execute the Rust functions.\nHowever, you can fully customize this behavior (and even throw away the thread pool)."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Consider the following Rust code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn compute() {\n  thread::sleep(Duration::from_millis(1000));\n}\n")),(0,o.kt)("p",null,"And the following Dart code using it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"var a = compute();\nvar b = compute();\nvar c = compute();\nawait Future.wait([a, b, c]); // You may need to learn `Future` and `async` in Dart to understand this\n")),(0,o.kt)("p",null,"Then it will take 1 second instead of 3 seconds to complete the code, because multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"compute")," can run concurrently."),(0,o.kt)("h2",{id:"customization"},"Customization"),(0,o.kt)("p",null,"By ",(0,o.kt)("a",{parentName:"p",href:"../custom/rust"},"providing your custom Rust ",(0,o.kt)("inlineCode",{parentName:"a"},"Handler")),",\nyou can customize configurations of the thread pool (worker pool)."),(0,o.kt)("p",null,"If you want to change the number of threads of the pool,\ncreate your own instance of the struct ",(0,o.kt)("inlineCode",{parentName:"p"},"SimpleThreadPool"),",\nand provide it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler"),".\n(TODO: We should add an API to construct such custom-number-of-threads pools more easily.\nCreate an issue if you want to know and this is still not updated.)"),(0,o.kt)("p",null,"Alternatively, you can even use other crates to provide a thread pool,\nby simply implementing the trait ",(0,o.kt)("inlineCode",{parentName:"p"},"BaseThreadPool")," (which has only one method - ",(0,o.kt)("inlineCode",{parentName:"p"},"execute"),").\nYour implementation can be anything - not even necessarily be a real thread pool."),(0,o.kt)("h2",{id:"with-synchronous-dart-mode"},"With synchronous Dart mode"),(0,o.kt)("p",null,"If you are using synchronous Dart mode,\nalternatively, the Rust code will be executed on the main thread\ninstead of the thread pool mentioned here."))}p.isMDXComponent=!0}}]);