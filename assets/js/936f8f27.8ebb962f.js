"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[5284],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},64034:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={},o="Using dummy headers",l={unversionedId:"manual/integrate/existing/ios/headers",id:"manual/integrate/existing/ios/headers",title:"Using dummy headers",description:"flutterrustbridge_codegen created a C header which lists all the",source:"@site/docs/manual/integrate/06-existing/04-ios/04-headers.md",sourceDirName:"manual/integrate/06-existing/04-ios",slug:"/manual/integrate/existing/ios/headers",permalink:"/flutter_rust_bridge/manual/integrate/existing/ios/headers",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/06-existing/04-ios/04-headers.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generating bindings",permalink:"/flutter_rust_bridge/manual/integrate/existing/ios/gen"},next:{title:"Integrating with MacOS",permalink:"/flutter_rust_bridge/manual/integrate/existing/ios/macos"}},s={},p=[{value:"iOS",id:"ios",level:2},{value:"Stripping iOS symbols",id:"stripping-ios-symbols",level:3},{value:"MacOS",id:"macos",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-dummy-headers"},"Using dummy headers"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen")," created a C header which lists all the\nexported symbols from our library, then uses it so that Xcode won't strip\nthe symbols."),(0,i.kt)("p",null,"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"ios/Runner/bridge_generated.h")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"macos/Runner/bridge_generated.h"),")\nto the project, either by dragging it onto the project tree or\nvia the ",(0,i.kt)("strong",{parentName:"p"},'Add Files to "Runner"...')," menu option."),(0,i.kt)("p",null,"Switch to the ",(0,i.kt)("strong",{parentName:"p"},"Build Phases")," tab and drag the ",(0,i.kt)("inlineCode",{parentName:"p"},"bridge_generated.h")," file over\nto the ",(0,i.kt)("strong",{parentName:"p"},"Copy Bundle Resources")," section, if it isn't already present."),(0,i.kt)("h2",{id:"ios"},"iOS"),(0,i.kt)("p",null,"Next, add this line to ",(0,i.kt)("inlineCode",{parentName:"p"},"ios/Runner/Runner-Bridging-Header.h"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'+#import "bridge_generated.h"\n')),(0,i.kt)("p",null,"and in ",(0,i.kt)("inlineCode",{parentName:"p"},"ios/Runner/AppDelegate.swift"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"}," override func application(\n     _ application: UIApplication,\n     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n ) -> Bool {\n+    let dummy = dummy_method_to_enforce_bundling()\n+    print(dummy)\n     ..\n }\n")),(0,i.kt)("p",null,"It is important that you use the result of ",(0,i.kt)("inlineCode",{parentName:"p"},"dummy_method_to_enforce_bundling()")," (like in the example above), otherwise the symbols might still get stripped."),(0,i.kt)("h3",{id:"stripping-ios-symbols"},"Stripping iOS symbols"),(0,i.kt)("p",null,"If you release your app through App Store, the steps above might not be sufficient. In that case you need to modify how Xcode strips the symbols:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"In Xcode, go to Target Runner > Build Settings > Strip Style."),(0,i.kt)("li",{parentName:"ol"},"Change from ",(0,i.kt)("strong",{parentName:"li"},"All Symbols")," to ",(0,i.kt)("strong",{parentName:"li"},"Non-Global Symbols"),".")),(0,i.kt)("p",null,"Ref: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/development/platform-integration/ios/c-interop#stripping-ios-symbols"},"https://docs.flutter.dev/development/platform-integration/ios/c-interop#stripping-ios-symbols")),(0,i.kt)("h2",{id:"macos"},"MacOS"),(0,i.kt)("p",null,"Flutter on MacOS does not use headers by default, so let's go ahead\nand add one ourselves. In the ",(0,i.kt)("strong",{parentName:"p"},"Build Settings")," tab, set the\n",(0,i.kt)("strong",{parentName:"p"},"Objective-C Bridging Header")," to be ",(0,i.kt)("strong",{parentName:"p"},"Runner/bridge_generated.h"),"."),(0,i.kt)("p",null,"Also, head over to the ",(0,i.kt)("strong",{parentName:"p"},"Build Phases")," tab, ",(0,i.kt)("strong",{parentName:"p"},"Bundle Framework")," section and add your ",(0,i.kt)("inlineCode",{parentName:"p"},"$crate.dylib")," by clicking the plus button. This includes your dynamic library file in your app package."),(0,i.kt)("p",null,"Finally, use ",(0,i.kt)("inlineCode",{parentName:"p"},"dummy_method_to_enforce_bundling")," somewhere within\n",(0,i.kt)("inlineCode",{parentName:"p"},"macos/Runner/AppDelegate.swift"),", as long as Xcode does not consider it dead code."),(0,i.kt)("h1",{id:"for-multi-blocks"},"For multi-blocks"),(0,i.kt)("p",null,"If there are ",(0,i.kt)("a",{parentName:"p",href:"https://cjycode.com/flutter_rust_bridge/feature/multiple_files.html"},"multi-blocks"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For iOS, just add the 1st generated block-header files in ",(0,i.kt)("inlineCode",{parentName:"li"},"Runner-Bridging-Header.h"),"."),(0,i.kt)("li",{parentName:"ul"},"For MacOS, just add the 1st generated block-header files as ",(0,i.kt)("strong",{parentName:"li"},"Objective-C Bridging Header"),".")),(0,i.kt)("p",null,"For all cases, the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppDelegate.swift")," should be the same as that in the single-block case.\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/1014"},"related issue")))}u.isMDXComponent=!0}}]);