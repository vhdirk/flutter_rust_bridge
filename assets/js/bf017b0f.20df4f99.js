"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[1289],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return r?n.createElement(h,l(l({ref:t},p),{},{components:r})):n.createElement(h,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},29501:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const i={},l="Set up Flutter/Dart+Rust support from scratch",o={unversionedId:"manual/miscellaneous/archived/set-up-from-scratch",id:"manual/miscellaneous/archived/set-up-from-scratch",title:"Set up Flutter/Dart+Rust support from scratch",description:"This documentation is archived, though technically still correct. Have a look at integrating with existing projects chapters for a more detailed demonstration.",source:"@site/docs/manual/miscellaneous/92-archived/03-set-up-from-scratch.md",sourceDirName:"manual/miscellaneous/92-archived",slug:"/manual/miscellaneous/archived/set-up-from-scratch",permalink:"/flutter_rust_bridge/manual/miscellaneous/archived/set-up-from-scratch",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/miscellaneous/92-archived/03-set-up-from-scratch.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Alternative NDK setup",permalink:"/flutter_rust_bridge/manual/miscellaneous/archived/tutorial-with-flutter/alternative-ndk"},next:{title:"Tutorial: Pure Dart",permalink:"/flutter_rust_bridge/manual/miscellaneous/archived/tutorial-pure-dart"}},s={},u=[{value:"Step 1",id:"step-1",level:2},{value:"Step 2",id:"step-2",level:2},{value:"Step 3",id:"step-3",level:2},{value:"Step 4",id:"step-4",level:2},{value:"Step 5",id:"step-5",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"set-up-flutterdartrust-support-from-scratch"},"Set up Flutter/Dart+Rust support from scratch"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This documentation is archived, though technically still correct. Have a look at ",(0,a.kt)("inlineCode",{parentName:"p"},"integrating with existing projects")," chapters for a more detailed demonstration.")),(0,a.kt)("p",null,"I suggest that you can start with the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/blob/master/frb_example/with_flutter"},"Flutter example")," first, and modify it to satisfy your needs. It can serve as a template for new projects. It is run against CI so we are sure it works."),(0,a.kt)("p",null,'Indeed, this library is nothing but a code generator that helps your Flutter/Dart functions call Rust functions. Therefore, "how to create a Flutter app that can run Rust code" is actually out of the scope of this library, and there are already several tutorials on the Internet.'),(0,a.kt)("p",null,"However, I can sketch the outline of what to do if you want to set up a new Flutter+Rust project as follows."),(0,a.kt)("h2",{id:"step-1"},"Step 1"),(0,a.kt)("p",null,"Create a new Flutter project (or use an existing one). The Dart SDK should be ",(0,a.kt)("inlineCode",{parentName:"p"},">=2.17.0")," if you want to use the latest ",(0,a.kt)("inlineCode",{parentName:"p"},"ffigen")," tool."),(0,a.kt)("h2",{id:"step-2"},"Step 2"),(0,a.kt)("p",null,"Create a new Rust project, say, at directory ",(0,a.kt)("inlineCode",{parentName:"p"},"rust")," under the Flutter project."),(0,a.kt)("h2",{id:"step-3"},"Step 3"),(0,a.kt)("p",null,"Edit ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," and add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'[lib]\nname = "flutter_rust_bridge_example" # whatever you like\n# notice this type. `cdylib` for android, and `staticlib` for iOS. I write down a script to change it before build.\n+ crate-type = ["cdylib"]\n')),(0,a.kt)("h2",{id:"step-4"},"Step 4"),(0,a.kt)("p",null,'Follow the standard steps of "how iOS uses static libraries".'),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In XCode, edit ",(0,a.kt)("inlineCode",{parentName:"li"},"Strip Style")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"Build Settings")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"Debugging Symbols"),"."),(0,a.kt)("li",{parentName:"ol"},"Add your ",(0,a.kt)("inlineCode",{parentName:"li"},"lib{crate}.a")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"Link Binary With Libraries")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"Build Phases"),"."),(0,a.kt)("li",{parentName:"ol"},"Add ",(0,a.kt)("inlineCode",{parentName:"li"},"binding.h")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"Copy Bundle Resources"),"."),(0,a.kt)("li",{parentName:"ol"},"Add ",(0,a.kt)("inlineCode",{parentName:"li"},'#import "binding.h"')," to ",(0,a.kt)("inlineCode",{parentName:"li"},"Runner-Bridging-Header"),"."),(0,a.kt)("li",{parentName:"ol"},"Last but not least, add a never-to-be-executed dummy function in Swift that calls any of the generated C bindings. This lib has already generated a dummy method for you, so you simply need to add ",(0,a.kt)("inlineCode",{parentName:"li"},'print("dummy_value=\\(dummy_method_to_enforce_bundling())");')," to swift file's ",(0,a.kt)("inlineCode",{parentName:"li"},"override func application(...) {}"),", and this will prevent symbol stripping - especially in the release build for iOS (i.e. when building ipa file or releasing to App Store). Notice that, we have to use that ",(0,a.kt)("inlineCode",{parentName:"li"},"dummy_method_to_enforce_bundling()"),", otherwise the symbols will not maintain in the release build, and Flutter will complain it cannot find the symbols.")),(0,a.kt)("h2",{id:"step-5"},"Step 5"),(0,a.kt)("p",null,"Lastly, in order to build the Rust library automatically when you are building Flutter, follow ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/q/69515032/4619958"},"this tutorial"),"."))}c.isMDXComponent=!0}}]);