"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[6556],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(n),m=i,d=g["".concat(l,".").concat(m)]||g[m]||p[m]||a;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},69178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(87462),i=(n(67294),n(3905));const a={},o="Generating bindings",s={unversionedId:"manual/integrate/existing/ios/gen",id:"manual/integrate/existing/ios/gen",title:"Generating bindings",description:"Now that we've got most of the plumbing out of the way, let's compile our Rust",source:"@site/docs/manual/integrate/06-existing/04-ios/03-gen.md",sourceDirName:"manual/integrate/06-existing/04-ios",slug:"/manual/integrate/existing/ios/gen",permalink:"/flutter_rust_bridge/manual/integrate/existing/ios/gen",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/06-existing/04-ios/03-gen.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linking the project",permalink:"/flutter_rust_bridge/manual/integrate/existing/ios/linking"},next:{title:"Using dummy headers",permalink:"/flutter_rust_bridge/manual/integrate/existing/ios/headers"}},l={},u=[{value:"Running the codegen",id:"running-the-codegen",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"generating-bindings"},"Generating bindings"),(0,i.kt)("p",null,"Now that we've got most of the plumbing out of the way, let's compile our Rust\napplication. If you just created your crate a few moments ago, go ahead and\nadd a new file at ",(0,i.kt)("inlineCode",{parentName:"p"},"$crate/src/api.rs")," and replace its contents with this snippet or\nwhatever suits your fancy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,ignore"},'pub fn greet() -> String {\n    "Hello from Rust! \ud83e\udd80".into()\n}\n')),(0,i.kt)("p",null,"then in ",(0,i.kt)("inlineCode",{parentName:"p"},"$crate/src/lib.rs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"+mod api;\n")),(0,i.kt)("h2",{id:"running-the-codegen"},"Running the codegen"),(0,i.kt)("p",null,"Before we can compile the library, we need to generate the bindings first.\nFrom the root of the app, run these commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"{{#include command.sh.txt}}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")," These will be the same commands to use whenever you modify your Rust library code.")),(0,i.kt)("p",null,"Running this command yields the C header of the functions and types exported\nby the Rust library, which we will need to keep the symbols from being stripped."))}p.isMDXComponent=!0}}]);