"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[7539],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||l;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2012:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const l={},i="External methods",o={unversionedId:"guides/third-party/manual/external-methods",id:"guides/third-party/manual/external-methods",title:"External methods",description:"Third-party packages can be converted automatically; only use the feature in this page when the automation is unwanted.",source:"@site/docs/guides/third-party/manual/external-methods.md",sourceDirName:"guides/third-party/manual",slug:"/guides/third-party/manual/external-methods",permalink:"/flutter_rust_bridge/guides/third-party/manual/external-methods",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/third-party/manual/external-methods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Manual",permalink:"/flutter_rust_bridge/guides/third-party/manual/"},next:{title:"External types",permalink:"/flutter_rust_bridge/guides/third-party/manual/external-types"}},u={},p=[{value:"Example",id:"example",level:2}],s={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"external-methods"},"External methods"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Third-party packages can be converted automatically; only use the feature in this page when the automation is unwanted.")),(0,a.kt)("p",null,"For methods that are not defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"rust_input")," folders in the current crate,\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"#[frb(external)]")," syntax (see example below) is needed to make flutter_rust_bridge aware of the methods."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Suppose we have these in external crates:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MyExternalStruct {\n    ...\n}\n\nimpl MyExternalStruct {\n    pub fn simple_external_method(&self) -> String {\n        // ... some long implementations ...\n    }\n}\n")),(0,a.kt)("p",null,"Then, we only need to repeat the function signatures in our main crate as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[frb(external)]\nimpl MyExternalStruct {\n    pub fn simple_external_method(&self) -> String {}\n}\n")),(0,a.kt)("p",null,"Remark: Just leave the function body empty (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"{}"),"), no need to put anything there."),(0,a.kt)("p",null,"This feature is compatible with the ",(0,a.kt)("a",{parentName:"p",href:"../../types/translatable/external/diff-crate"},"mirroring")," feature as well."))}c.isMDXComponent=!0}}]);