"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[2967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,m=c["".concat(s,".").concat(d)]||c[d]||g[d]||a;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},27099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},l="Logging",i={unversionedId:"guides/how-to/logging",id:"guides/how-to/logging",title:"Logging",description:"Since I have seen some questions asking how logging can be implemented with a Flutter + Rust application, here are some examples.",source:"@site/docs/guides/how-to/logging.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/logging",permalink:"/flutter_rust_bridge/guides/how-to/logging",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Debugging",permalink:"/flutter_rust_bridge/guides/how-to/debug"},next:{title:"Report errors",permalink:"/flutter_rust_bridge/guides/how-to/report-error"}},s={},p=[{value:"Approach 1: Use the default one",id:"approach-1-use-the-default-one",level:2},{value:"Example 2: Print logs to console",id:"example-2-print-logs-to-console",level:2},{value:"Example 3: My logger in production",id:"example-3-my-logger-in-production",level:2},{value:"Example 4: Send Rust logs to Dart",id:"example-4-send-rust-logs-to-dart",level:2},{value:"Example 5: A step-by-step guide to send Rust logs to Dart",id:"example-5-a-step-by-step-guide-to-send-rust-logs-to-dart",level:2}],u={toc:p};function g(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logging"},"Logging"),(0,o.kt)("p",null,"Since I have seen some questions asking how logging can be implemented with a Flutter + Rust application, here are some examples."),(0,o.kt)("h2",{id:"approach-1-use-the-default-one"},"Approach 1: Use the default one"),(0,o.kt)("p",null,"If using the template by ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen create/integrate"),', the "print logs to console" is configured by default,\nvia the auto-generated call to ',(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge::setup_default_user_utils()"),"."),(0,o.kt)("p",null,"Thus, you do not need to do anything :)"),(0,o.kt)("h2",{id:"example-2-print-logs-to-console"},"Example 2: Print logs to console"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn setup_the_logger() {\n    #[cfg(target_os = "android")]\n    android_logger::init_once(android_logger::Config::default().with_max_level(LevelFilter::Trace));\n\n    #[cfg(target_os = "ios")]\n    oslog::OsLogger::new("com.example.test").level_filter(LevelFilter::Trace).init().unwrap();\n}\n')),(0,o.kt)("p",null,"In other words, use the corresponding platform logger\n(",(0,o.kt)("a",{parentName:"p",href:"https://crates.io/crates/android_logger"},"https://crates.io/crates/android_logger")," and ",(0,o.kt)("a",{parentName:"p",href:"https://crates.io/crates/oslog"},"https://crates.io/crates/oslog"),")."),(0,o.kt)("h2",{id:"example-3-my-logger-in-production"},"Example 3: My logger in production"),(0,o.kt)("p",null,"In my own app in production, I use the following strategy for Rust logging: Use normal Rust logging methods, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"info!")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"debug!")," macros. The logs are consumed in two places: They are printed via platform-specific methods (like android Logcat and iOS NSLog), and also use a Stream to send them to the Dart side such that my Dart code and further process are using the same pipeline as normal Dart logs (e.g. save to a file, send to server, etc)."),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"full")," code related to logging in my app can be seen here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/486"},"#486"),"."),(0,o.kt)("h2",{id:"example-4-send-rust-logs-to-dart"},"Example 4: Send Rust logs to Dart"),(0,o.kt)("p",null,"@MnlPhlp encapsulates the step-by-step example below into a small Rust package,\nsuch that you can setup Rust-logging-to-Dart in several lines.\nPlease refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mnlphlp/flutter_logger"},"https://github.com/mnlphlp/flutter_logger")," for details."),(0,o.kt)("h2",{id:"example-5-a-step-by-step-guide-to-send-rust-logs-to-dart"},"Example 5: A step-by-step guide to send Rust logs to Dart"),(0,o.kt)("p",null,"Let us implement a simple logging system (adapted from the logging system I use with ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," in my app in production), where Rust code can send logs to Dart code."),(0,o.kt)("p",null,"The Rust ",(0,o.kt)("inlineCode",{parentName:"p"},"api.rs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct LogEntry {\n    pub time_millis: i64,\n    pub level: i32,\n    pub tag: String,\n    pub msg: String,\n}\n\n// Simplified just for demonstration.\n// To compile, you need a OnceCell, or Mutex, or RwLock\n// Also see https://github.com/fzyzcjy/flutter_rust_bridge/issues/398\nlazy_static! { static ref log_stream_sink: StreamSink<LogEntry>; }\n\npub fn create_log_stream(s: StreamSink<LogEntry>) {\n    stream_sink = s;\n}\n")),(0,o.kt)("p",null,"Now Rust will probably complain at you because ",(0,o.kt)("inlineCode",{parentName:"p"},"IntoDart")," is not implemented for ",(0,o.kt)("inlineCode",{parentName:"p"},"LogEntry"),". This is expected, because ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," will generate this trait implementation for you.\nTo fix this error you should just rerun ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen"),"."),(0,o.kt)("p",null,"Generated Dart code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dart"},"Stream<LogEntry> createLogStream();\n")),(0,o.kt)("p",null,"Now let us use it in Dart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> setup() async {\n    createLogStream().listen((event) {\n      print('log from rust: ${event.level} ${event.tag} ${event.msg} ${event.timeMillis}');\n    });\n}\n")),(0,o.kt)("p",null,"And now we can happily log anything in Rust:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'log_stream_sink.add(LogEntry { msg: "hello I am a log from Rust", ... })\n')),(0,o.kt)("p",null,"Of course, you can implement a logger following the Rust's ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," crate wrapping this raw stream sink, then you can use standard Rust logging mechanisms like ",(0,o.kt)("inlineCode",{parentName:"p"},"info!"),". I did exactly that in my project."))}g.isMDXComponent=!0}}]);