"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[4995],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),y=c(r),d=o,m=y["".concat(i,".").concat(d)]||y[d]||p[d]||a;return r?n.createElement(m,s(s({ref:t},l),{},{components:r})):n.createElement(m,s({ref:t},l))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=y;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,s[1]=u;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},898:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={},s="Asynchronous Rust",u={unversionedId:"guides/concurrency/async-rust",id:"guides/concurrency/async-rust",title:"Asynchronous Rust",description:"The async Rust functions, async fn f() {}, are supported as well.",source:"@site/docs/guides/concurrency/async-rust.md",sourceDirName:"guides/concurrency",slug:"/guides/concurrency/async-rust",permalink:"/flutter_rust_bridge/guides/concurrency/async-rust",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/concurrency/async-rust.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Synchronous Rust (thread pool)",permalink:"/flutter_rust_bridge/guides/concurrency/sync-rust"},next:{title:"Synchronous Dart",permalink:"/flutter_rust_bridge/guides/concurrency/sync-dart"}},i={},c=[{value:"Example",id:"example",level:2},{value:"Customization",id:"customization",level:2}],l={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"asynchronous-rust"},"Asynchronous Rust"),(0,o.kt)("p",null,"The async Rust functions, ",(0,o.kt)("inlineCode",{parentName:"p"},"async fn f() {}"),", are supported as well.\nJust write normal Rust code, and flutter_rust_bridge code generator will recognize it is async\nand generate proper bindings.\nUnder the hood, async runtime is utilized to run those functions."),(0,o.kt)("p",null,'As for when to use asynchronous vs synchronous Rust,\nthere are already many articles on the Internet,\nfor example, by searching "Rust async vs thread pool", "why async Rust", etc.\nIn short, for example,\nwhen you want Rust to read/write files, do network requests, etc,\nit is better to use async.\nOn the other hand,\nif your computation is CPU-heavy,\nthe thread pool may fit better.'),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Well, just write anything you like, so here is a bare minimal example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn f() { ... }\n")),(0,o.kt)("p",null,"With Dart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"await f();\n")),(0,o.kt)("h2",{id:"customization"},"Customization"),(0,o.kt)("p",null,"Similar to how you customize thread pools for ",(0,o.kt)("a",{parentName:"p",href:"/flutter_rust_bridge/guides/concurrency/sync-rust"},"synchronous Rust"),",\nwe can also provide arbitrary async-runtime implementations.\nThis can be done similarly by creating your custom handler instance with custom async runtime."),(0,o.kt)("p",null,"For example, you may want to change the number of OS threads that Tokio creates.\nOr, it is also easy to plug in whatever async runtime that you like,\nby implementing the simple trait ",(0,o.kt)("inlineCode",{parentName:"p"},"BaseAsyncRuntime")," with a single ",(0,o.kt)("inlineCode",{parentName:"p"},"spawn")," method."))}p.isMDXComponent=!0}}]);