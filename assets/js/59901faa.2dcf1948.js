"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[4221],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>m});var i=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=i.createContext({}),u=function(t){var e=i.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=u(t.components);return i.createElement(d.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},p=i.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,d=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),p=u(n),m=r,g=p["".concat(d,".").concat(m)]||p[m]||c[m]||o;return n?i.createElement(g,a(a({ref:e},s),{},{components:n})):i.createElement(g,a({ref:e},s))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,a=new Array(o);a[0]=p;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=t,l.mdxType="string"==typeof t?t:r,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},94682:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=n(87462),r=(n(67294),n(3905));const o={},a="Android NDK Init",l={unversionedId:"guides/how-to/ndk-init",id:"guides/how-to/ndk-init",title:"Android NDK Init",description:"This page is only needed to read if you want to use Android NDK in Rust code,",source:"@site/docs/guides/how-to/ndk-init.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/ndk-init",permalink:"/flutter_rust_bridge/guides/how-to/ndk-init",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/ndk-init.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Protobuf / JSON / etc",permalink:"/flutter_rust_bridge/guides/how-to/protobuf-json"},next:{title:"Avoid regressions",permalink:"/flutter_rust_bridge/guides/how-to/regression"}},d={},u=[{value:"Method 1",id:"method-1",level:2},{value:"MainActivity.kt",id:"mainactivitykt",level:3},{value:"Rust",id:"rust",level:3},{value:"Cargo.toml",id:"cargotoml",level:4},{value:"lib.rs",id:"librs",level:4},{value:"Method 2",id:"method-2",level:2},{value:"MainActivity.kt",id:"mainactivitykt-1",level:3},{value:"Rust",id:"rust-1",level:3},{value:"Cargo.toml",id:"cargotoml-1",level:4},{value:"lib.rs",id:"librs-1",level:4}],s={toc:u};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,i.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"android-ndk-init"},"Android NDK Init"),(0,r.kt)("p",null,'This page is only needed to read if you want to use Android NDK in Rust code,\nand see "android context was not initialized" error, or want to know more about',(0,r.kt)("inlineCode",{parentName:"p"},"ndk_context")," initialization."),(0,r.kt)("p",null,"Related issues:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/1323"},"#1323"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/1868"},"#1868"),"."),(0,r.kt)("h2",{id:"method-1"},"Method 1"),(0,r.kt)("p",null,"On android, when attempting to use crates that interact with the JavaVM through the JNI (like oboe-rs via cpal), you may\nget panics that typically have this message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[ERROR:flutter/runtime/dart_vm_initializer.cc(41)] Unhandled Exception: FfiException(PANIC_ERROR, android context was not initialized, null)\n")),(0,r.kt)("p",null,"This is due to a interesting quirk of Rust NDK interaction, where\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rust-mobile/ndk-context"},(0,r.kt)("inlineCode",{parentName:"a"},"ndk_context"))," crate does not have it's JVM and Android context\ninitialized. Typically, in a normal application, the Android JVM would ",(0,r.kt)("inlineCode",{parentName:"p"},"System.loadLibrary()")," the library through the\nActivity inside the JVM. It looks for symbols related to the JNI and executes them in accordance with the JNI standard.\nThis would initialize the ",(0,r.kt)("inlineCode",{parentName:"p"},"ndk_context")," normally via ",(0,r.kt)("inlineCode",{parentName:"p"},"JNI_OnLoad"),". However, using the DartVM this step is skipped while\nloading the library, as the DartVM is not the JVM. So, the Android specific variables are not initialized, and therefore\nyou cannot interact with the system via the Java interface."),(0,r.kt)("h3",{id:"mainactivitykt"},"MainActivity.kt"),(0,r.kt)("p",null,"Add these lines to your FlutterActivity subclass:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'package com.example.frontend\n\nimport io.flutter.embedding.android.FlutterActivity\n\n// https://github.com/dart-lang/sdk/issues/46027\nclass MainActivity : FlutterActivity() {\n    // this `init` block, where "foo" is the name of your library\n    // ex: if it\'s libfoo.so, then use "foo"\n    init {\n        System.loadLibrary("foo")\n    }\n}\n')),(0,r.kt)("p",null,"This handles loading the library before Dart does, and also executes the JNI related initialization."),(0,r.kt)("h3",{id:"rust"},"Rust"),(0,r.kt)("h4",{id:"cargotoml"},"Cargo.toml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[target.\'cfg(target_os = "android")\'.dependencies]\njni = "0.21"\nndk-context = "0.1"\n')),(0,r.kt)("h4",{id:"librs"},"lib.rs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg(target_os = "android")]\n#[no_mangle]\npub extern "C" fn JNI_OnLoad(vm: jni::JavaVM, res: *mut std::os::raw::c_void) -> jni::sys::jint {\n    use std::ffi::c_void;\n\n    let vm = vm.get_java_vm_pointer() as *mut c_void;\n    unsafe {\n        ndk_context::initialize_android_context(vm, res);\n    }\n    jni::JNIVersion::V6.into()\n}\n')),(0,r.kt)("p",null,"This is the bit of JNI glue that allows for ",(0,r.kt)("inlineCode",{parentName:"p"},"ndk_context")," to be initialized."),(0,r.kt)("h2",{id:"method-2"},"Method 2"),(0,r.kt)("p",null,"Alternative method, if you require direct access to the current Android context, without creating another one."),(0,r.kt)("h3",{id:"mainactivitykt-1"},"MainActivity.kt"),(0,r.kt)("p",null,"Add these lines to your FlutterActivity subclass, as well as create a Plugin class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'package com.example.frontend\n\nimport android.content.Context\nimport androidx.annotation.NonNull\nimport io.flutter.embedding.android.FlutterActivity\nimport io.flutter.embedding.engine.FlutterEngine\nimport io.flutter.embedding.engine.plugins.FlutterPlugin\nimport io.flutter.plugin.common.MethodCall\nimport io.flutter.plugin.common.MethodChannel.MethodCallHandler\nimport io.flutter.plugin.common.MethodChannel.Result\n\nclass MainActivity : FlutterActivity() {\n    override fun configureFlutterEngine(\n        @NonNull flutterEngine: FlutterEngine,\n    ) {\n        super.configureFlutterEngine(flutterEngine)\n        flutterEngine.plugins.add(MyPlugin())\n    }\n}\n\nclass MyPlugin : FlutterPlugin, MethodCallHandler {\n    companion object {\n        init {\n            System.loadLibrary("rust_lib_frontend")\n        }\n    }\n\n    external fun init_android(ctx: Context)\n\n    override fun onAttachedToEngine(\n        @NonNull flutterPluginBinding: FlutterPlugin.FlutterPluginBinding,\n    ) {\n        init_android(flutterPluginBinding.applicationContext)\n    }\n\n    override fun onMethodCall(\n        @NonNull call: MethodCall,\n        @NonNull result: Result,\n    ) {\n        result.notImplemented()\n    }\n\n    override fun onDetachedFromEngine(\n        @NonNull binding: FlutterPlugin.FlutterPluginBinding,\n    ) {\n    }\n}\n')),(0,r.kt)("h3",{id:"rust-1"},"Rust"),(0,r.kt)("h4",{id:"cargotoml-1"},"Cargo.toml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[target.\'cfg(target_os = "android")\'.dependencies]\njni = "0.21"\n')),(0,r.kt)("h4",{id:"librs-1"},"lib.rs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg(target_os = "android")]\nuse {\n    jni::{objects::JClass, objects::JObject, JNIEnv},\n    mylib::setup_android,\n};\n\n#[cfg(target_os = "android")]\n#[no_mangle]\npub extern "system" fn Java_com_example_spareshare_MyPlugin_init_1android(\n    env: JNIEnv,\n    _class: JClass,\n    ctx: JObject,\n) {\n    setup_android(env, ctx);\n}\n')))}c.isMDXComponent=!0}}]);