"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8871],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=o.createContext({}),l=function(e){var r=o.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=l(e.components);return o.createElement(u.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),f=n,m=d["".concat(u,".").concat(f)]||d[f]||c[f]||a;return t?o.createElement(m,s(s({ref:r},p),{},{components:t})):o.createElement(m,s({ref:r},p))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89181:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(87462),n=(t(67294),t(3905));const a={},s="Report errors",i={unversionedId:"guides/how-to/report-error",id:"guides/how-to/report-error",title:"Report errors",description:"At Dart side",source:"@site/docs/guides/how-to/report-error.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/report-error",permalink:"/flutter_rust_bridge/guides/how-to/report-error",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/report-error.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/flutter_rust_bridge/guides/how-to/logging"},next:{title:"Testing and mocking",permalink:"/flutter_rust_bridge/guides/how-to/test"}},u={},l=[{value:"At Dart side",id:"at-dart-side",level:2},{value:"Ensure Rust stack traces",id:"ensure-rust-stack-traces",level:2},{value:"(Optional) At Rust side",id:"optional-at-rust-side",level:2}],p={toc:l};function c(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"report-errors"},"Report errors"),(0,n.kt)("h2",{id:"at-dart-side"},"At Dart side"),(0,n.kt)("p",null,"Just follow Flutter's guide, or your error backend's guide, to setup the error handling."),(0,n.kt)("p",null,"It will catch all pure Dart errors, as well as all Rust errors that are propagated to Dart."),(0,n.kt)("h2",{id:"ensure-rust-stack-traces"},"Ensure Rust stack traces"),(0,n.kt)("p",null,"If you are not seeing Rust stack traces, please refer to ",(0,n.kt)("a",{parentName:"p",href:"stack-trace"},"this page")," to setup."),(0,n.kt)("h2",{id:"optional-at-rust-side"},"(Optional) At Rust side"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"I personally do this because my Rust code has symbols stripped.\nThus, to see the Rust stack traces, I have to integrate the error reporting SDK at this layer,\nto let it capture enough information for symbolication."),(0,n.kt)("p",{parentName:"admonition"},"For normal users, try to do the Dart side setup first, and only do this if that does not give you enough information.")),(0,n.kt)("p",null,"We can simply use a ",(0,n.kt)("a",{parentName:"p",href:"../custom/rust"},"custom Handler"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MyErrorHandler(ReportDartErrorHandler);\n\nimpl ErrorHandler for MyErrorHandler {\n    fn handle_error(&self, port: i64, error: handler::Error) {\n        send_error_to_your_backend(&error);\n        self.0.handle_error(port, error)\n    }\n\n    ...\n}\n")))}c.isMDXComponent=!0}}]);