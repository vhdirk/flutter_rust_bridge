"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[3240],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),k=i,N=u["".concat(d,".").concat(k)]||u[k]||s[k]||r;return n?a.createElement(N,l(l({ref:t},m),{},{components:n})):a.createElement(N,l({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},56165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},l="CST Codec",o={unversionedId:"guides/contributing/submodules/cst-codec",id:"guides/contributing/submodules/cst-codec",title:"CST Codec",description:"Terminology",source:"@site/docs/guides/contributing/submodules/cst-codec.md",sourceDirName:"guides/contributing/submodules",slug:"/guides/contributing/submodules/cst-codec",permalink:"/flutter_rust_bridge/guides/contributing/submodules/cst-codec",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/contributing/submodules/cst-codec.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Submodules",permalink:"/flutter_rust_bridge/guides/contributing/submodules/"},next:{title:"DCO Codec",permalink:"/flutter_rust_bridge/guides/contributing/submodules/dco-codec"}},d={},p=[{value:"Terminology",id:"terminology",level:2},{value:"More about function call example",id:"more-about-function-call-example",level:2},{value:"Type Mappings",id:"type-mappings",level:2},{value:"Memory safety",id:"memory-safety",level:2},{value:"OptionalList",id:"optionallist",level:2}],m={toc:p};function s(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cst-codec"},"CST Codec"),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Rust IO Wire")," types refers to the C types the Dart VM uses to communicate with the Rust library."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dart IO Wire")," types are the Dart counterpart of Rust IO wire types, but in\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"*.io.dart")," files. Both Rust and Dart wire types communicate using the\nvocabulary of C types, aka primitives, structs, unions and pointers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Rust JS Wire")," types are the WASM equivalent of Rust IO\nwire types, many of which are distinct from their C siblings.\nIn addition, these types may also take the form of the catch-all ",(0,i.kt)("inlineCode",{parentName:"li"},"JsValue"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dart JS Wire")," types are the WASM equivalent of Dart IO wire types, but\nunlike Rust JS wire types, most of these types remain identical to their real API counterparts.\nSimilar to the the relationship between Rust IO and Dart IO wire types, Rust JS and Dart JS wire types\nuse the vocabulary of JavaScript types, aka primitives, arrays, typed arrays and objects.")),(0,i.kt)("h2",{id:"more-about-function-call-example"},"More about function call example"),(0,i.kt)("p",null,"Let us see a bit more detail about what happens when a function is called, and when we are using CST codec."),(0,i.kt)("p",null,"Suppose a user calls a (generated) Dart function ",(0,i.kt)("inlineCode",{parentName:"p"},"func({required String str})"),". Then, the following happens:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The generated Dart function, ",(0,i.kt)("inlineCode",{parentName:"li"},"func({required String str})"),', convert "',(0,i.kt)("em",{parentName:"li"},"Dart api data"),'" (i.e. the data that user really provides) into "',(0,i.kt)("em",{parentName:"li"},"Dart wire data"),'" (i.e. the data that will really pass between Dart and Rust). More specifically, it calls ',(0,i.kt)("inlineCode",{parentName:"li"},"_api2wire_String(str)")," and get a ",(0,i.kt)("inlineCode",{parentName:"li"},"ffi.Pointer<wire_uint_8_list>")," (because ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),"s use ",(0,i.kt)("inlineCode",{parentName:"li"},"pub struct wire_uint_8_list { ptr: *mut u8, len: i32 }")," under the hood)."),(0,i.kt)("li",{parentName:"ol"},"Now we call the Dart version of ",(0,i.kt)("inlineCode",{parentName:"li"},"wire_func"),", with low-level data like ",(0,i.kt)("inlineCode",{parentName:"li"},"wire_uint_8_list"),". We have used our codegen to create a Rust ",(0,i.kt)("inlineCode",{parentName:"li"},"wire_func")," function, and use ",(0,i.kt)("inlineCode",{parentName:"li"},"cbindgen")," to generate the corresponding C function, and use ",(0,i.kt)("inlineCode",{parentName:"li"},"ffigen")," to get the corresponding Dart function. Here, we call the Dart version of ",(0,i.kt)("inlineCode",{parentName:"li"},"wire_func"),". Since Dart FFI and Rust FFI is C-compatible, it seamlessly calls the Rust version of ",(0,i.kt)("inlineCode",{parentName:"li"},"wire_func"),". Notice that, since we are utilizing C-compatible functions (and it is the only feasible way), we can only pass around low-level things like pointers, instead of high-level and safe things."),(0,i.kt)("li",{parentName:"ol"},"Surely, the Rust ",(0,i.kt)("inlineCode",{parentName:"li"},"wire_func")," is called. The function uses ",(0,i.kt)("inlineCode",{parentName:"li"},".wire2api()"),' to convert "',(0,i.kt)("em",{parentName:"li"},"Rust wire data"),'" (',(0,i.kt)("inlineCode",{parentName:"li"},"wire_uint_8_list"),' here) into "',(0,i.kt)("em",{parentName:"li"},"Rust api data"),'" (',(0,i.kt)("inlineCode",{parentName:"li"},"String")," here, i.e. data that users really use)."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"FLUTTER_RUST_BRIDGE_HANDLER"),' is called with "',(0,i.kt)("em",{parentName:"li"},"Rust api data"),'". That handler is user-customizable, so users may provide their own implementation other than the default thread-pool, etc. By default, we use a thread pool, and we call the user-written ',(0,i.kt)("inlineCode",{parentName:"li"},"func")," Rust function in ",(0,i.kt)("inlineCode",{parentName:"li"},"api.rs"),"."),(0,i.kt)("li",{parentName:"ol"},"The user-written ",(0,i.kt)("inlineCode",{parentName:"li"},"fn func(str: String) -> String { ... }")," is called, and we get a return value.")),(0,i.kt)("p",null,"For the latter half of the story, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"dco-codec"},"DCO Codec")," part."),(0,i.kt)("h2",{id:"type-mappings"},"Type Mappings"),(0,i.kt)("p",null,"Unless otherwise noted, ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," refers to a type from the same column or the generic type.\nDoes not include delegated types."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Rust"),(0,i.kt)("th",{parentName:"tr",align:null},"Rust IO Wire"),(0,i.kt)("th",{parentName:"tr",align:null},"Dart IO Wire"),(0,i.kt)("th",{parentName:"tr",align:null},"Rust JS Wire"),(0,i.kt)("th",{parentName:"tr",align:null},"Dart JS Wire"),(0,i.kt)("th",{parentName:"tr",align:null},"Dart"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i{8..32}")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i{8..32}")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"),(0,i.kt)("sup",{parentName:"td",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i{8..32}")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u{8..32}")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u{8..32}")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"),(0,i.kt)("sup",{parentName:"td",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u{8..32}")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i64")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i64")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"},(0,i.kt)("inlineCode",{parentName:"a"},"BigInt"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"},(0,i.kt)("inlineCode",{parentName:"a"},"BigInt"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u64")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u64")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"},(0,i.kt)("inlineCode",{parentName:"a"},"BigInt"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"},(0,i.kt)("inlineCode",{parentName:"a"},"BigInt"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"usize")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"usize")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"usize")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vec<i{8..32}>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_int_{8..32}_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_int_{8..32}_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Box<[i{8..32}]>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Int{8..32}Array")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Int{8..32}List"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vec<u{8..32}>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_uint_{8..32}_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_uint_{8..32}_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Box<[u{8..32}]>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Uint{8..32}Array")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Uint{8..32}List"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vec<i64>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_int_64_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_int_64_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Box<[i64]>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array"},(0,i.kt)("inlineCode",{parentName:"a"},"BigInt64Array"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Int64List"),(0,i.kt)("sup",{parentName:"td",id:"fnref-2"},(0,i.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vec<u64>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_uint_64_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_uint_64_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Box<[u64]>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array"},(0,i.kt)("inlineCode",{parentName:"a"},"BigUint64Array"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Uint64List"),(0,i.kt)("sup",{parentName:"td",id:"fnref-2"},(0,i.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_uint_8_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_uint_8_list")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vec<String>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_StringList")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_StringList")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Box<[String]>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"List")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"List<String>"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vec<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_list_t")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"wire_list_t")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Box<[JsValue]>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"List")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"List<T>"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Box<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*mut T")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ffi.Pointer<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"T"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Option<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*mut T")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ffi.Pointer<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Option<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"T?")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"T?"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Option<Box<T>>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*mut T")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ffi.Pointer<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Option<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"T?")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"T?"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"enum/struct ",(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*mut wire_t")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ffi.Pointer<T>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Array")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"List")),(0,i.kt)("td",{parentName:"tr",align:null},"class ",(0,i.kt)("inlineCode",{parentName:"td"},"T"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"enum ",(0,i.kt)("inlineCode",{parentName:"td"},"T"),(0,i.kt)("sup",{parentName:"td",id:"fnref-3"},(0,i.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i32"),(0,i.kt)("sup",{parentName:"td",id:"fnref-4"},(0,i.kt)("a",{parentName:"sup",href:"#fn-4",className:"footnote-ref"},"4"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int"),(0,i.kt)("sup",{parentName:"td",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i32"),(0,i.kt)("sup",{parentName:"td",id:"fnref-4"},(0,i.kt)("a",{parentName:"sup",href:"#fn-4",className:"footnote-ref"},"4"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:null},"enum ",(0,i.kt)("inlineCode",{parentName:"td"},"T"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"DartDynamic"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://docs.rs/flutter_rust_bridge/latest/flutter_rust_bridge/ffi/io/ffi/struct.DartCObject.html"},(0,i.kt)("inlineCode",{parentName:"a"},"DartCObject"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dynamic")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://rustwasm.github.io/wasm-bindgen/reference/types/jsvalue.html"},(0,i.kt)("inlineCode",{parentName:"a"},"JsValue"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dynamic")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dynamic"))))),(0,i.kt)("h2",{id:"memory-safety"},"Memory safety"),(0,i.kt)("p",null,"How is memory safety implemented? This is a case-by-case problem. For example, suppose we want to see how a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," is safely passed from Dart to Rust. Then, we need to examine the Dart ",(0,i.kt)("inlineCode",{parentName:"p"},"_api2wire_String")," and the Rust ",(0,i.kt)("inlineCode",{parentName:"p"},".wire2api()")," for it."),(0,i.kt)("p",null,"Indeed ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," is implemented by delegating to ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec<u8>"),", so we need to see code related to String as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec<u8>"),". By simply clicking a few times and jump around code, we will see that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {\n  return _api2wire_uint_8_list(utf8.encoder.convert(raw));\n}\n\nffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {\n  final ans = inner.new_uint_8_list_0(raw.length);\n  ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);\n  return ans;\n}\n")),(0,i.kt)("p",null,"and"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {\n    fn wire2api(self) -> Vec<u8> {\n        unsafe {\n            let wrap = support::box_from_leak_ptr(self);\n            support::vec_from_leak_ptr(wrap.ptr, wrap.len)\n        }\n    }\n}\n\nimpl Wire2Api<String> for *mut wire_uint_8_list {\n    fn wire2api(self) -> String {\n        let vec: Vec<u8> = self.wire2api();\n        String::from_utf8_lossy(&vec).into_owned()\n    }\n}\n\npub struct wire_uint_8_list {\n    ptr: *mut u8,\n    len: i32,\n}\n")),(0,i.kt)("p",null,"In other words, String (or ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec<u8>"),") is converted to a raw struct with pointer and length field. The memory is manipulated carefully so there is no leak or double free."),(0,i.kt)("p",null,"We use Valgrind to check as well, and I use it in production environment without problems, so no worries about memory problems :)"),(0,i.kt)("h2",{id:"optionallist"},"OptionalList"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In V2 we have not done this,\nbecause we need to support multiple codecs,\nthus the IR needs to be kept minimal;\ntypes like ",(0,i.kt)("inlineCode",{parentName:"p"},"StringList")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Uuids")," are also refactored to be removed.\nThis subsection applies to V1 currently.")),(0,i.kt)("p",null,"Per the implementation, most IRs are also accompanied by a List type (GeneralList, PrimitiveList, StringList etc.)\neach of which handles lists in different ways. When Optional was first implemented, it relied on GeneralList since the\nunderlying assumption that Optional already boxed stack values should allow for seamless interaction. Howver, this became an issue\nlater because other IRs would have to accommodate for Optionals instead of being perfectly encapsulated, leading to\nugly hacks. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/pull/1388"},"#1388")," introduced OptionalList to bring\nOptional in line with other IRs, and is implemented as a list of maybe-null pointers. It does highlight several drawbacks\nto this approach to IRs where specializations shine compared to GeneralList."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"GeneralList requires a fully-allocated list and asks the Dart side to ",(0,i.kt)("em",{parentName:"li"},"fill")," in the blanks via ",(0,i.kt)("inlineCode",{parentName:"li"},"api_fill")," functions, but these\nare not implemented by any delegates since they all have their own special lists (StringList, TimeList, Uuids). This renders\ntypes like ",(0,i.kt)("inlineCode",{parentName:"li"},"List<String?>")," difficult to implement without hacks."),(0,i.kt)("li",{parentName:"ol"},"OptionalList's inner pointer is a ",(0,i.kt)("inlineCode",{parentName:"li"},"*mut *mut T"),", which without significant refactoring would be difficult to represent with\nGeneralList, and whose typical usage doesn't really require double indirection often enough to justify it."),(0,i.kt)("li",{parentName:"ol"},"OptionalList enables future optimizations, for example the case when ",(0,i.kt)("inlineCode",{parentName:"li"},"sizeof(T) <= sizeof(usize)"),", which would certainly be difficult\nto accomplish with GeneralList.")),(0,i.kt)("div",{className:"footnotes"},(0,i.kt)("hr",{parentName:"div"}),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol",id:"fn-4"},"Enums may also specify a ",(0,i.kt)("inlineCode",{parentName:"li"},"#[repr]"),", which is planned to be implemented.",(0,i.kt)("a",{parentName:"li",href:"#fnref-4",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-1"},"When behind a ",(0,i.kt)("inlineCode",{parentName:"li"},"ffi.Pointer"),", they are their respective types from ",(0,i.kt)("inlineCode",{parentName:"li"},"dart:ffi"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"ffi.Int8"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ffi.Int16"),", etc.",(0,i.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-3"},"Refers to C-style enums only (no fields).",(0,i.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-2"},"These types are unsupported on Web by ",(0,i.kt)("inlineCode",{parentName:"li"},"dart:typed_list"),", so this library provides a barebores shim over the JS native types.\nIf you wish to use these types, replace all ",(0,i.kt)("inlineCode",{parentName:"li"},"dart:typed_list")," imports with this library.",(0,i.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}s.isMDXComponent=!0}}]);