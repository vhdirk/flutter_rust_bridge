"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[4701],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),y=c(r),d=a,f=y["".concat(l,".").concat(d)]||y[d]||p[d]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},97134:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const i={},o="Overview",s={unversionedId:"guides/types/overview",id:"guides/types/overview",title:"Overview",description:"There are basically two categories when it comes to types:",source:"@site/docs/guides/types/overview.md",sourceDirName:"guides/types",slug:"/guides/types/overview",permalink:"/flutter_rust_bridge/guides/types/overview",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Types",permalink:"/flutter_rust_bridge/guides/types/"},next:{title:"Translatable types",permalink:"/flutter_rust_bridge/guides/types/translatable/"}},l={},c=[],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview"},"Overview"),(0,a.kt)("p",null,"There are basically two categories when it comes to types:"),(0,a.kt)("p",null,'Firstly, Rust and Dart types, even if they are not encodable, not cloneable,\nrequire a handle of native resources, etc, are supported.\nShortly speaking, they will become "opaque" handles in the other side (imagine as fancy pointers).\nYou can use them as function arguments, return values, call methods on them, etc.\nThis is the ',(0,a.kt)("a",{parentName:"p",href:"arbitrary"},"arbitrary types"),"."),(0,a.kt)("p",null,"Secondly, a lot of types (even structs, enums, ...) can be further translated into Dart native types.\nFor example, suppose you return a Rust struct of type ",(0,a.kt)("inlineCode",{parentName:"p"},"struct A { name: String, children: Vec<A> }"),".\nThen, the Dart side will receive a normal Dart object of type ",(0,a.kt)("inlineCode",{parentName:"p"},"class A { String name; List<A> children; }"),",\nwith all values properly translated,\njust like any other Dart object and classes we see everyday.\nThis is discussed in the ",(0,a.kt)("a",{parentName:"p",href:"translatable"},"translatable types")," section."))}p.isMDXComponent=!0}}]);