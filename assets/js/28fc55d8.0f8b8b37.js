"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[3934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,f=c["".concat(u,".").concat(m)]||c[m]||o[m]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var d={};for(var u in t)hasOwnProperty.call(t,u)&&(d[u]=t[u]);d.originalType=e,d.mdxType="string"==typeof e?e:a,l[1]=d;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},47766:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},l="Installing dependencies",d={unversionedId:"manual/integrate/existing/deps",id:"manual/integrate/existing/deps",title:"Installing dependencies",description:"Next, we need to install a few build-time and runtime dependencies.",source:"@site/docs/manual/integrate/06-existing/02-deps.md",sourceDirName:"manual/integrate/06-existing",slug:"/manual/integrate/existing/deps",permalink:"/flutter_rust_bridge/manual/integrate/existing/deps",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/06-existing/02-deps.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creating a new crate",permalink:"/flutter_rust_bridge/manual/integrate/existing/new-crate"},next:{title:"Integrating with Android",permalink:"/flutter_rust_bridge/manual/integrate/existing/android/"}},u={},s=[{value:"Build-time dependencies",id:"build-time-dependencies",level:2},{value:"Dart dependencies",id:"dart-dependencies",level:2},{value:"Rust dependencies",id:"rust-dependencies",level:2},{value:"System dependencies",id:"system-dependencies",level:2},{value:"Non-Debian Linux",id:"non-debian-linux",level:3}],p={toc:s};function o(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"installing-dependencies"},"Installing dependencies"),(0,a.kt)("p",null,"Next, we need to install a few build-time and runtime dependencies."),(0,a.kt)("h2",{id:"build-time-dependencies"},"Build-time dependencies"),(0,a.kt)("p",null,"These dependencies are required only in build-time:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://lib.rs/crates/flutter_rust_bridge_codegen"},(0,a.kt)("inlineCode",{parentName:"a"},"flutter_rust_bridge_codegen")),", the core codegen for Rust-Dart glue code"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://pub.dev/packages/ffigen"},(0,a.kt)("inlineCode",{parentName:"a"},"ffigen")),", to generate Dart code from C headers"),(0,a.kt)("li",{parentName:"ul"},"A working installation of LLVM, see ",(0,a.kt)("a",{parentName:"li",href:"https://pub.dev/packages/ffigen#installing-llvm"},"Installing LLVM"),", used by ",(0,a.kt)("inlineCode",{parentName:"li"},"ffigen")),(0,a.kt)("li",{parentName:"ul"},"(Optional) ",(0,a.kt)("a",{parentName:"li",href:"https://lib.rs/crates/cargo-xcode"},(0,a.kt)("inlineCode",{parentName:"a"},"cargo-xcode")),", if you want to generate Xcode projects for iOS and MacOS")),(0,a.kt)("p",null,"An easy way to install most of these dependencies is to run:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"dart project"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo install flutter_rust_bridge_codegen\ndart pub add --dev ffigen && dart pub add ffi\n# if building for iOS or MacOS\ncargo install cargo-xcode\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"flutter project"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo install flutter_rust_bridge_codegen\nflutter pub add --dev ffigen && flutter pub add ffi\n# if building for iOS or MacOS\ncargo install cargo-xcode\n")))),(0,a.kt)("p",null,"Alternatively, each of these dependencies may provide prebuilt binaries. Check with\nyour package manager and review them individually."),(0,a.kt)("h2",{id:"dart-dependencies"},"Dart dependencies"),(0,a.kt)("p",null,"On the Dart side, ",(0,a.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," is the required runtime component of\n",(0,a.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen"),". If you plan to use enum structs in Rust, the\nfollowing dependencies are also needed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"build_runner")," (dev)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"freezed")," (dev)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"freezed_annotation"))),(0,a.kt)("p",null,"Their usage is explained in ",(0,a.kt)("a",{parentName:"p",href:"../template/generate/build-runner"},"Using ",(0,a.kt)("inlineCode",{parentName:"a"},"build_runner")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"flutter pub add flutter_rust_bridge\n# if using Dart codegen\nflutter pub add -d build_runner\nflutter pub add -d freezed\nflutter pub add freezed_annotation\n")),(0,a.kt)("h2",{id:"rust-dependencies"},"Rust dependencies"),(0,a.kt)("p",null,"Similar to Dart, Rust requires the ",(0,a.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," runtime component for support."),(0,a.kt)("p",null,"Add these lines to ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'+[dependencies]\n+flutter_rust_bridge = "1"\n')),(0,a.kt)("h2",{id:"system-dependencies"},"System dependencies"),(0,a.kt)("h3",{id:"non-debian-linux"},"Non-Debian Linux"),(0,a.kt)("p",null,"For non-debian based Linux distributions, there are a few prerequisites:"),(0,a.kt)("p",null,"Firstly, ensure that packages are up to date (or install by demand)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"clang"),(0,a.kt)("li",{parentName:"ul"},"llvm-libs"),(0,a.kt)("li",{parentName:"ul"},"glibc")),(0,a.kt)("p",null,"Restarting system may be required."),(0,a.kt)("p",null,"Secondly, set the environment variable in your shell profile (",(0,a.kt)("inlineCode",{parentName:"p"},".bashrc"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".zshrc"),", etc):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export CPATH="$(clang -v 2>&1 | grep "Selected GCC installation" | rev | cut -d\' \' -f1 | rev)/include"\n')))}o.isMDXComponent=!0}}]);