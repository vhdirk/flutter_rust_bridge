"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8352],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,b=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return r?a.createElement(b,l(l({ref:t},u),{},{components:r})):a.createElement(b,l({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},40240:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=r(87462),n=(r(67294),r(3905));const i={},l="Flutter wrapper",o={unversionedId:"manual/integrate/library/creating-libraries/flutter-wrapper",id:"manual/integrate/library/creating-libraries/flutter-wrapper",title:"Flutter wrapper",description:"On this page, we will start creating the Flutter wrapper around our Dart-only library package.",source:"@site/docs/manual/integrate/07-library/02-creating-libraries/02-flutter-wrapper.md",sourceDirName:"manual/integrate/07-library/02-creating-libraries",slug:"/manual/integrate/library/creating-libraries/flutter-wrapper",permalink:"/flutter_rust_bridge/manual/integrate/library/creating-libraries/flutter-wrapper",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/07-library/02-creating-libraries/02-flutter-wrapper.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dart-only base",permalink:"/flutter_rust_bridge/manual/integrate/library/creating-libraries/dart-only"},next:{title:"Platform setup",permalink:"/flutter_rust_bridge/manual/integrate/library/platform-setup/"}},p={},s=[{value:"Additional setup steps",id:"additional-setup-steps",level:2}],u={toc:s};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"flutter-wrapper"},"Flutter wrapper"),(0,n.kt)("p",null,"On this page, we will start creating the Flutter wrapper around our Dart-only library package.\nWe start with the plugin_ffi Flutter template since it is somewhat similar to what we need,\nbut we will need to modify it significantly in the coming steps.\nConfiguring the build processes for each supported platform is also a bit involved,\nso those are covered individually in the coming pages."),(0,n.kt)("p",null,"Run ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter create --help")," to see all the available options; you may want to set some (like ",(0,n.kt)("inlineCode",{parentName:"p"},"--org"),")."),(0,n.kt)("p",null,"Finally, in the ",(0,n.kt)("inlineCode",{parentName:"p"},"packages")," folder, run the following, adding any other options you choose\nand replacing ",(0,n.kt)("inlineCode",{parentName:"p"},"library_name")," with your library name:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"flutter create --template=plugin_ffi --platforms=android,ios,macos,linux,windows --org=com.example flutter_library_name\n")),(0,n.kt)("h2",{id:"additional-setup-steps"},"Additional setup steps"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Add your Dart-only base as a dependency in your new Flutter package's ",(0,n.kt)("inlineCode",{parentName:"li"},"pubspec.yaml"),".\n",(0,n.kt)("em",{parentName:"li"},"Use the version syntax, e.g. ",(0,n.kt)("inlineCode",{parentName:"em"},"^1.0.0")),". Melos will take care of the dependency resolution for us."),(0,n.kt)("li",{parentName:"ol"},"If you choose to have integration testing in CI (recommended),\nadd an ",(0,n.kt)("inlineCode",{parentName:"li"},"integration_test")," folder to your Flutter package's and/or Flutter example package's root directory,\nthen add the following to the  ",(0,n.kt)("inlineCode",{parentName:"li"},"pubspec.yaml")," of the applicable package(s):")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"dev_dependencies:\n  flutter_test:\n    sdk: flutter\n  integration_test:\n    sdk: flutter\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"In ",(0,n.kt)("inlineCode",{parentName:"li"},"/packages/flutter_library_name/lib/flutter_library_name.dart"),",\nadd the following near the top of the file, replacing ",(0,n.kt)("inlineCode",{parentName:"li"},"library_name")," with your Dart-only package's name:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"export 'package:library_name/library_name.dart';\n")),(0,n.kt)("p",null,"This re-exports your Dart-only package to users of your Flutter package,\nso they only need to do one ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter pub add"),"."),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Finally, we will need to write some code to be able to handle FFI in Flutter.\nModify the following as needed (replacing ",(0,n.kt)("inlineCode",{parentName:"li"},"library_name")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"LibraryName")," with your library name).")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"// lib/src/ffi/stub.dart\nObject createLibraryImpl() => throw UnimplementedError();\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"// lib/src/ffi/io.dart\nimport 'dart:ffi';\nimport 'dart:io';\n\nDynamicLibrary createLibraryImpl() {\n  const base = 'library_name';\n\n  if (Platform.isIOS || Platform.isMacOS) {\n    return DynamicLibrary.open('$base.framework/$base');\n  } else if (Platform.isWindows) {\n    return DynamicLibrary.open('$base.dll');\n  } else {\n    return DynamicLibrary.open('lib$base.so');\n  }\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"// lib/src/ffi/web.dart\nimport 'package:library_name/library_name.dart';\n\nWasmModule createLibraryImpl() {\n  // TODO add web support. See:\n  // https://github.com/fzyzcjy/flutter_rust_bridge/blob/master/frb_example/with_flutter/lib/ffi.web.dart\n  throw UnsupportedError('Web support is not provided yet.');\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"// lib/src/ffi.dart\nimport 'package:library_name/library_name.dart';\nimport 'ffi/stub.dart'\n    if (dart.library.io) 'ffi/io.dart'\n    if (dart.library.js_interop) 'ffi/web.dart';\n\nLibraryName createLib() =>\n    createWrapper(createLibraryImpl());\n")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"Run ",(0,n.kt)("inlineCode",{parentName:"li"},"melos bs"))),(0,n.kt)("p",null,"Now, inside your Flutter library, you can call ",(0,n.kt)("inlineCode",{parentName:"p"},"createLib()")," to get an instance of the FRB-generated Dart class!\nHowever, it won't work just yet; we will wire up our Flutter package to use our Rust binaries in the next subsection."))}c.isMDXComponent=!0}}]);