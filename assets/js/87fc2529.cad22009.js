"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[886],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(r),f=i,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},85240:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=r(87462),i=(r(67294),r(3905));const a={},o="Alternatives",l={unversionedId:"guides/lifetimes/alternatives",id:"guides/lifetimes/alternatives",title:"Alternatives",description:"In addition to directly using the feature, sometimes the following alternative approaches are also helpful.",source:"@site/docs/guides/lifetimes/alternatives.md",sourceDirName:"guides/lifetimes",slug:"/guides/lifetimes/alternatives",permalink:"/flutter_rust_bridge/guides/lifetimes/alternatives",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/lifetimes/alternatives.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multi borrows",permalink:"/flutter_rust_bridge/guides/lifetimes/multi-borrows"},next:{title:"Concurrency and async",permalink:"/flutter_rust_bridge/guides/concurrency/"}},s={},u=[{value:"Proxy",id:"proxy",level:2},{value:"Shared ownership",id:"shared-ownership",level:2},{value:"Clone",id:"clone",level:2}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"alternatives"},"Alternatives"),(0,i.kt)("p",null,"In addition to directly using the feature, sometimes the following alternative approaches are also helpful."),(0,i.kt)("h2",{id:"proxy"},"Proxy"),(0,i.kt)("p",null,"The proxy feature can be utilized when the borrowed type is indeed a field of struct or something like that.\nPlease refer to ",(0,i.kt)("a",{parentName:"p",href:"../misc-features/proxy"},"this page")," for more details."),(0,i.kt)("h2",{id:"shared-ownership"},"Shared ownership"),(0,i.kt)("p",null,"One alternative approach is to use shared ownership.\nFor example, we can write something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"struct MyStruct {\n    field: Arc<Another>,\n}\n")),(0,i.kt)("p",null,"As a side remark, if you want to expose that field to Dart side in opaque struct,\nyou can also wrap as ",(0,i.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque<Another>"),"."),(0,i.kt)("h2",{id:"clone"},"Clone"),(0,i.kt)("p",null,"Yet another way is to simply clone related things when returned, instead of returning a reference.\nThis is especially reasonable when the resource being cloned is not heavy."))}p.isMDXComponent=!0}}]);