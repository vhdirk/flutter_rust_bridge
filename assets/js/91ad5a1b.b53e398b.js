"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[277],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),u=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=u(r),m=n,d=f["".concat(s,".").concat(m)]||f[m]||c[m]||a;return r?o.createElement(d,i(i({ref:t},p),{},{components:r})):o.createElement(d,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},56955:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var o=r(87462),n=(r(67294),r(3905));const a={},i="Multi borrows",l={unversionedId:"guides/lifetimes/multi-borrows",id:"guides/lifetimes/multi-borrows",title:"Multi borrows",description:"In this page, we discuss a limitation of types with lifetimes because of combination of Rust and Dart.",source:"@site/docs/guides/lifetimes/multi-borrows.md",sourceDirName:"guides/lifetimes",slug:"/guides/lifetimes/multi-borrows",permalink:"/flutter_rust_bridge/guides/lifetimes/multi-borrows",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/lifetimes/multi-borrows.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Return references",permalink:"/flutter_rust_bridge/guides/lifetimes/return-references"},next:{title:"Alternatives",permalink:"/flutter_rust_bridge/guides/lifetimes/alternatives"}},s={},u=[{value:"A pure Rust example",id:"a-pure-rust-example",level:2},{value:"Translate to Dart",id:"translate-to-dart",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"multi-borrows"},"Multi borrows"),(0,n.kt)("p",null,"In this page, we discuss a limitation of types with lifetimes because of combination of Rust and Dart."),(0,n.kt)("h2",{id:"a-pure-rust-example"},"A pure Rust example"),(0,n.kt)("p",null,"Let's get started with a Rust example (full code ",(0,n.kt)("a",{parentName:"p",href:"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=13d436ffe4da5d746837941e3f5b72b5"},"here"),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'fn f(foo: &Foo) -> &Bar { .. }\nfn function_that_mutably_borrow_foo(foo: &mut Foo) { .. }\n\nlet mut foo = Foo();\nlet bar = f(&foo);\n\n// function_that_mutably_borrow_foo(&mut foo); // <-- cannot do it here, since bar is still borrowed\n\nprintln!("{}", bar);\ndrop(bar);\n\nfunction_that_mutably_borrow_foo(&mut foo); // <-- can do it here\n')),(0,n.kt)("p",null,"Rust compiler does not allow us to call the ",(0,n.kt)("inlineCode",{parentName:"p"},"function_that_mutably_borrow_foo")," at the first place,\nbecause ",(0,n.kt)("inlineCode",{parentName:"p"},"bar")," immutably borrows ",(0,n.kt)("inlineCode",{parentName:"p"},"foo")," and is still alive.\nRecall that we are forbidden from having both immutable borrows and mutable borrows on the same object.\n(Uncomment the line in Rust playground to see it in action.)"),(0,n.kt)("h2",{id:"translate-to-dart"},"Translate to Dart"),(0,n.kt)("p",null,"The equivalent code written in Dart is as follows."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"var foo = Foo();\nvar bar = f(foo);\n// functionThatMutablyBorrowFoo(foo); // <-- cannot do it here\nbar.dispose();\nfunctionThatMutablyBorrowFoo(foo); // <-- can do it here\n")),(0,n.kt)("p",null,"As can be expected, it has the same issue,\nexcept that the form of issue will be waiting at runtime instead of errors at compile time."),(0,n.kt)("p",null,"In addition,\nthough we usually do not need to manually call ",(0,n.kt)("inlineCode",{parentName:"p"},"dispose")," (because GC will do it for us),\nhere we need to do it manually.\nThis is because we want ",(0,n.kt)("inlineCode",{parentName:"p"},"bar")," not to borrow ",(0,n.kt)("inlineCode",{parentName:"p"},"foo")," after that one,\nand there is no (at least yet) deep static analysis on Dart to automatically do so."),(0,n.kt)("p",null,"Therefore, the takeaway is:\nIf we want to borrow ",(0,n.kt)("inlineCode",{parentName:"p"},"foo")," mutably,\nremember to ",(0,n.kt)("inlineCode",{parentName:"p"},"dispose")," the ",(0,n.kt)("inlineCode",{parentName:"p"},"bar")," object before that."),(0,n.kt)("p",null,"If this makes your scenario much more complicated,\nfeel free to ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues"},"open an issue"),' to discuss your scenario,\nand we can discuss how to improve it.\nFor example, we may introduce something like a "scope" where references out of scope will be disposed.'),(0,n.kt)("p",null,"In some scenarios, the alternatives introduced in the next page may be appealing because of this."))}c.isMDXComponent=!0}}]);