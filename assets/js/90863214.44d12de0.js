"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[1291],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,y=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return n?r.createElement(y,l(l({ref:t},p),{},{components:n})):r.createElement(y,l({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32752:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const i={},l="Stream / Iterator",o={unversionedId:"guides/types/translatable/stream",id:"guides/types/translatable/stream",title:"Stream / Iterator",description:"Introduction",source:"@site/docs/guides/types/translatable/stream.md",sourceDirName:"guides/types/translatable",slug:"/guides/types/translatable/stream",permalink:"/flutter_rust_bridge/guides/types/translatable/stream",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/translatable/stream.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Return Types & Exceptions",permalink:"/flutter_rust_bridge/guides/types/translatable/return"},next:{title:"Custom encoder/decoders",permalink:"/flutter_rust_bridge/guides/types/translatable/custom"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Stream argument in arbitrary types",id:"stream-argument-in-arbitrary-types",level:2},{value:"Control whether to wait",id:"control-whether-to-wait",level:2},{value:"Add an error",id:"add-an-error",level:2},{value:"Examples",id:"examples",level:2},{value:"Simple",id:"simple",level:3},{value:"A timer",id:"a-timer",level:3},{value:"Stream type inside arbitrary types",id:"stream-type-inside-arbitrary-types",level:3}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"stream--iterator"},"Stream / Iterator"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"What is ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream"),"? In short: call once, return multiple times; like ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterator"),"s."),(0,a.kt)("p",null,"Flutter's ",(0,a.kt)("a",{parentName:"p",href:"https://dart.dev/tutorials/language/streams"},"Stream")," is a powerful abstraction. When using it as the return\nvalue of Rust function, we can allow the scenario that we call function once, and then return multiple times."),(0,a.kt)("p",null,"For example, your Rust function may run computationally heavy algorithms, and for every hundreds of milliseconds, it\nfinds out a new piece of the full solution. In this case, it can immediately give that piece to Flutter, then Flutter\ncan render it to UI immediately. Therefore, users do not need to wait for the full algorithm to finish before he can see\nsome partial results on the user interface."),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"As for the details, a Rust function with signature like ",(0,a.kt)("inlineCode",{parentName:"p"},"fn f(sink: StreamSink<T>, ..) -> Result<()>")," is translated to a\nDart function ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream<T> f(..)"),"."),(0,a.kt)("p",null,"Notice that, you can hold that ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSink")," forever, and use it freely even ",(0,a.kt)("em",{parentName:"p"},"after the Rust function itself returns"),".\nThe logger example below also demonstrates this (the ",(0,a.kt)("inlineCode",{parentName:"p"},"create_log_stream")," returns almost immediately, while you can use\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSink")," after, say, an hour)."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSink")," can be placed at any location. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"fn f(a: i32, b: StreamSink<String>)"),"\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"fn f(a: StreamSink<String>, b: i32)")," are both valid."),(0,a.kt)("h2",{id:"stream-argument-in-arbitrary-types"},"Stream argument in arbitrary types"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSink")," type can also be placed in arbitrary types, such as inside structs, enums, vectors, ...\nSee example 3 below for more details."),(0,a.kt)("h2",{id:"control-whether-to-wait"},"Control whether to wait"),(0,a.kt)("p",null,"By default, the stream is immediately usable in Dart, and the Rust function is ",(0,a.kt)("em",{parentName:"p"},"not")," awaited."),(0,a.kt)("p",null,"If you need the Rust function to finish execution ",(0,a.kt)("em",{parentName:"p"},"before")," the stream can be obtained in Dart,\njust add ",(0,a.kt)("inlineCode",{parentName:"p"},"#[frb(stream_dart_await)]")," (to await the stream) or ",(0,a.kt)("inlineCode",{parentName:"p"},"#[frb(sync)]")," (to let the whole function be synchronous) to\nthe function."),(0,a.kt)("h2",{id:"add-an-error"},"Add an error"),(0,a.kt)("p",null,"To put an error into the stream, the ",(0,a.kt)("inlineCode",{parentName:"p"},"stream.add_error")," method can be utilized.\nIt currently accepts an ",(0,a.kt)("inlineCode",{parentName:"p"},"anyhow::Error")," type."),(0,a.kt)("p",null,"For example, we can write down ",(0,a.kt)("inlineCode",{parentName:"p"},'stream.add_error(anyhow::anyhow!("hello"))')," and the Dart side will see an exception thrown."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"../../how-to/logging"},"logging examples")," which uses streams extensively."),(0,a.kt)("h3",{id:"simple"},"Simple"),(0,a.kt)("p",null,"Simply iterate through your Dart stream, and call a normal Rust function for each item.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"myStream.listen((data) => myRustfunction(data));\n")),(0,a.kt)("p",null,"While on the Rust side:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn my_rust_function(data: WhateverType) { ... }\n")),(0,a.kt)("h3",{id:"a-timer"},"A timer"),(0,a.kt)("p",null,"Credits: ",(0,a.kt)("a",{parentName:"p",href:"https://gist.github.com/Desdaemon/be5da0a1c6b4724f20093ef434959744"},"this"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/347"},"#347"),"."),(0,a.kt)("details",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use anyhow::Result;\nuse std::{thread::sleep, time::Duration};\n\nuse crate::frb_generated::StreamSink;\n\nconst ONE_SECOND: Duration = Duration::from_secs(1);\n\n// can't omit the return type yet, this is a bug\npub fn tick(sink: StreamSink<i32>) -> Result<()> {\n    let mut ticks = 0;\n    loop {\n        sink.add(ticks);\n        sleep(ONE_SECOND);\n        if ticks == i32::MAX {\n            break;\n        }\n        ticks += 1;\n    }\n    Ok(())\n}\n"))),(0,a.kt)("p",null,"And use it in Dart:"),(0,a.kt)("details",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'ffi.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late Stream<int> ticks;\n\n  @override\n  void initState() {\n    super.initState();\n    ticks = api.tick();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\"Time since starting Rust stream\"),\n            StreamBuilder<int>(\n              stream: ticks,\n              builder: (context, snap) {\n                final style = Theme.of(context).textTheme.headlineMedium;\n                final error = snap.error;\n                if (error != null)\n                  return Tooltip(\n                      message: error.toString(),\n                      child: Text('Error', style: style));\n\n                final data = snap.data;\n                if (data != null) return Text('$data second(s)', style: style);\n\n                return const CircularProgressIndicator();\n              },\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n"))),(0,a.kt)("h3",{id:"stream-type-inside-arbitrary-types"},"Stream type inside arbitrary types"),(0,a.kt)("p",null,"For example, we can place it as a field of a struct or inside a vector:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MyStruct {\n    a: String,\n    b: StreamSink<i32>,\n}\n\npub fn f(arr: Vec<StreamSink<i32>>, st: MyStruct) {}\n")))}m.isMDXComponent=!0}}]);