"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[7312],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),f=a,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},42402:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const i={},o="CMake with Gradle",s={unversionedId:"manual/integrate/existing/android/cmake",id:"manual/integrate/existing/android/cmake",title:"CMake with Gradle",description:"If you have taken a look at either the windows or linux folder,",source:"@site/docs/manual/integrate/06-existing/03-android/02-cmake.md",sourceDirName:"manual/integrate/06-existing/03-android",slug:"/manual/integrate/existing/android/cmake",permalink:"/flutter_rust_bridge/manual/integrate/existing/android/cmake",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/06-existing/03-android/02-cmake.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hooking onto tasks",permalink:"/flutter_rust_bridge/manual/integrate/existing/android/tasks"},next:{title:"Integrating with iOS/MacOS",permalink:"/flutter_rust_bridge/manual/integrate/existing/ios/"}},l={},u=[],c={toc:u};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cmake-with-gradle"},"CMake with Gradle"),(0,a.kt)("p",null,"If you have taken a look at either the ",(0,a.kt)("inlineCode",{parentName:"p"},"windows")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"linux")," folder,\nyou will see a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt"),". This is the definition file\nfor the CMake toolchain that Flutter uses to build Windows and Linux apps.\nYou can also use this strategy on Gradle, but this setup is beyond the scope\nof this guide and reserved for advanced tinkers."),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/studio/projects/add-native-code"},"Add C and C++ code to your project"),"\npage on the official Android docs, modify around C-specific parts and use a\ntool like ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/corrosion-rs/corrosion"},(0,a.kt)("inlineCode",{parentName:"a"},"Corrosion"))," to integrate\nwith Cargo. The advantage of this setup is that you can reuse your C tools\n",(0,a.kt)("em",{parentName:"p"},"and")," benefit from various techniques such as caching builds."))}d.isMDXComponent=!0}}]);